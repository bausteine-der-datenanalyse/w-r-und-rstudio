---
title: "Daten aufbereiten"
---

```{r setup}
#| echo: false
#| message: false
library(hms)
library(readxl)
library(tidyverse)
library(kableExtra)
```

# Ziel bei der Aufbereitung von Daten

## Tidy data

> “Happy families are all alike; every unhappy family is unhappy in its own way.” — Leo Tolstoy

> “Tidy datasets are all alike, but every messy dataset is messy in its own way.” — Hadley Wickham

Tidy data (aufgeräumte Daten)

- In jeder Spalte steht eine Variable
- In jeder Zeile steht eine Beobachtung
- In jeder Zelle steht ein Wert
- Wir haben alle Variablen, die wir benötigen

[]{.up30}

→ Nicht immer so eindeutig, wie es hier klingt

## Pragmatischer Ansatz

[]{.down120}

- Daten sind dann aufgeräumt, wenn das, was man vorhat, einfach umzusetzen ist
- Zum Beispiel plotten

# Der Pipe-Operator `|>`

## Verkettete Funktion $f(x) = \sin\left(\sqrt{ e^x } \right)$

**Mit geschachtelten Funktionen**

```{r}
sin(sqrt(exp(1.5)))
```

→ Zuerst wird $e^x$ berechnet, dann die Wurzel gezogen und danach der Sinus ermittelt

**Mit Pipe-Operator**

```{r}
1.5 |> exp() |> sqrt() |> sin()
```

→ Operator `|>` fügt linke Seite als erstes Argument der Funktion rechts ein

## Verkettete Funktion $f(x) = \sin\left(\sqrt{ e^x } \right)$

![](bilder/pipes.svg)

# Variablen auswählen oder umbenennen mit `select()` und `rename()`

## Wann braucht man das?

[]{.down120}

- In der Datenquelle stehen mehr Informationen als benötigt
- Die Namen der Merkmale sind in der Datei nicht gut gewählt

## Beispieldatensatz

```{r}
d_uni <- read_excel("daten/unistrasse-2017-2.xlsx", sheet = "raw(T)", range = "B2:H20712")
d_uni
```

## Variablen auswählen mit `select()`

```{r}
d_uni |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

[]{.down60}

- Alle Merkmale angeben, die ausgewählt werden sollen
- Anführungszeichen bei Spaltennamen mit Leerzeichen


## Variablen entfernen mit `select()`

```{r}
d_uni |> select(-Fahrtrichtung, -ends_with("(Radar)"))
```

[]{.down60}

- Hier: Merkmale angegeben, die nicht ausgewählt werden sollen
- Anführungszeichen bei Spaltennamen mit Leerzeichen
- Wird einer Variablen ein `-` vorangestellt, dann wird die Spalte entfernt
- Alle anderen Variablen werden beibehalten


## Variablen umbenennen mit `select()`

```{r}
d_uni |> select(Datum, FZ = Fahrzeug, v = Geschwindigkeit, L = "Länge (cm)")
```

[]{.down60}

- Umbenennen mit `neuer_name = alter_name` 


## Beispieldatensatz 2

```{r}
d <- tibble(A_X = 1:2, B_X = 1:2, X_A = 1:2, X_B = 1:2, Datum = 1:2)
d |> kable()
```


## Variablen nach Muster auswählen

:::: {.columns}
::: {.column width=45%}
```{r}
d |> select(starts_with("X")) |> kable()
```

```{r}
d |> select(ends_with("X")) |> kable()
```
:::

::: {.column width=10%}

:::

::: {.column width=45%}
```{r}
d |> select(-starts_with("X")) |> kable()
```

- Mit `starts_with()` und `ends_with()` ein Muster für Namen festlegen
- Funktioniert auch wieder mit `-`

:::
::::


## Variablen umbenennen mit `rename()`

```{r}
d_uni |> rename(v = Geschwindigkeit) 
```

[]{.down60}

- Variable umbenennen mit `neuer_name = alter_name`
- Alle anderen Variablen werden beibehalten

# Beobachtungen auswählen mit `filter()` und `slice()`

## Wann braucht man das?

[]{.down120}

- Wenn einzelne Werte aussortiert werden sollen
- Wenn man sich nur für bestimmte Beobachtungen interessiert

## Wieder Beispieldatensatz

```{r}
d_uni |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

## Filter: Nur LKW

```{r}
d_uni |> filter(Fahrzeug == "LKW") |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

[]{.down60}

- Bedingung als logischer Ausdruck mit Name der Variablen

## Filter: Nur LKW, die schneller als 60km/h gefahren sind

```{r}
d_uni |> filter(Fahrzeug == "LKW" & Geschwindigkeit > 60) |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

[]{.down60}

- Bedingung als logischer Ausdruck mit Name der Variablen
- Logisches und: `&` 

## Filter: Nur LKW oder Fahrzeuge, die schneller als 80km/h gefahren sind

```{r}
d_uni |> filter(Fahrzeug == "LKW" | Geschwindigkeit > 80) |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

[]{.down60}

- Bedingung als logischer Ausdruck mit Name der Variablen
- Logisches oder: `|` 

## Filter: Alle Fahrzeuge, deren Fahrzeugtyp nicht erkannt wurde

```{r}
d_uni |> filter(is.na(Fahrzeug)) |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

## Filter: Zeilen mit `NA` entfernen

```{r}
d_uni |> filter(!is.na(Fahrzeug)) |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

## Filter: Kriterium in Vektor

```{r}
d_uni |> filter(Fahrzeug %in% c("Zweirad", "LKW")) |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

[]{.down60}

- Werte für Merkmal aus Vektor

## Auswahl von Beobachtungen nach Zeilennummer mit `slice()`

```{r}
d_uni |> slice(c(10, 30, 700)) |> select(Datum, Fahrzeug, Geschwindigkeit, "Länge (cm)")
```

[]{.down60}

- Beobachtungen nach Position auswählen

## Auswahl von Beobachtungen am Anfang oder Ende mit `slice()`

::: {.columns}
::: {.column}
```{r}
d_uni |> slice_head(n = 10) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```
:::
::: {.column}
```{r}
d_uni |> slice_tail(n = 10) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```
:::
:::

[]{.down60}

- Die ersten und letzten n (Anzahl) Beobachtungen auswählen
- `Head` wie Kopf und `tail` wie Schwanz oder Ende

## Auswahl von kleinsten oder größten Beobachtungen mit `slice()`

::: {.columns}
::: {.column}
```{r}
d_uni |> slice_min(Geschwindigkeit, n = 8) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```
:::
::: {.column}
```{r}
d_uni |> slice_max(Geschwindigkeit, n = 8) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```
:::
:::

[]{.down60}

- Die kleinsten und größten n (Anzahl) Beobachtungen für ein Merkmal auswählen
- `min` wie Minimum und `max` wie Maximum


# Beobachtungen sortieren mit `arrange()`

## Wann braucht man das?

[]{.down120}

- Wenn man sich für die größten oder kleinsten Werte interessiert
- Um die Reihenfolge beim Plotten zu ändern, so dass bestimmte Objekte über anderen liegen

## Übersicht der langsamsten Fahrzeuge

```{r}
d_uni |> arrange(Geschwindigkeit) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```

[]{.down60}

- Sortiert aufsteigend nach dem angegebenen Merkmal
- Schnellste Fahrer mit `desc(merkmal)` (sortiert absteigend)

## Nach mehreren Kriterien sortieren (1/2)

```{r}
d_uni |> arrange(Fahrzeug, Geschwindigkeit) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```

[]{.down60}

- Zuerst nach Fahrzeugen sortieren
- Innerhalb einer Fahrzeuggruppe nach Geschwindigkeit angeordnet

## Nach mehreren Kriterien sortieren (2/2)

```{r}
d_uni |> arrange(Geschwindigkeit, Fahrzeug) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```

[]{.down60}

- Zuerst nach der Geschwindigkeit sortieren
- Innerhalb einer Geschwindigkeiten nach Fahrzeugen angeordnet

# Variablen hinzufügen oder verändern mit `mutate()`

## Wann braucht man das?

[]{.down120}

- Wenn aus den vorliegenden Werten neue Werte berechnet werden sollen
- Wenn bestehende Werte verändert werden sollen (typischerweise: Datum)

## Geschwindigkeit runden

```{r}
d_uni |> mutate(V10 = signif(Geschwindigkeit, digits = 1))|> select(Datum, Fahrzeug, v = Geschwindigkeit, V10)
```

[]{.down60}

- `neue_variable = Ausdruck(alte_variablen)`
- Mehrere Variablen sind möglich
- Mit `signif()` auf eine signifikante Stellte gerundet

## Datum konvertieren

```{r}
d_uni |> mutate(Datum = dmy_hms(Datum, tz = "Europe/Berlin")) |> select(Datum, Fahrzeug, v = Geschwindigkeit)
```

[]{.down60}

- Nach dem Einlesen ist das Merkmal Datum eine Zeichenkette
- Alter Wert von Datum wird überschrieben
- Mit `dmy_hms()` in date-time konvertiert, Zeitzone angeben
- Jetzt können wir mit dem Datum arbeiten

## Datum und Uhrzeit konvertieren

```{r}
d_uni |> 
  mutate(
    Datum = dmy_hms(Datum, tz = "Europe/Berlin"),
    Uhrzeit = as_hms(Datum)
  ) |> select(Datum, Uhrzeit, Fahrzeug, v = Geschwindigkeit)
```

[]{.down60}

- Mit `as_hms()` die Uhrzeit heraussuchen (`library(hms)`)

## Mit der Uhrzeit rechnen

```{r}
d_uni |> 
  mutate(
    Datum = dmy_hms(Datum, tz = "Europe/Berlin"),
    D15 = floor_date(Datum, "15 minutes"),
    Uhrzeit = as_hms(Datum)
  ) |> 
select(Datum, Uhrzeit, D15)
```

[]{.down60}

- `floor_date(x, unit)` rundet die Datums- oder Zeitangabe auf die angegebene Einheit (`unit`) ab (`floor`) (`library(lubridate)`)

## Alles in einem Rutsch {.smaller}

```{r}
d_unistrasse <- read_excel("daten/unistrasse-2017-2.xlsx",sheet="raw(T)",range="B2:H20712") |>
  select(Datum, Fz = Fahrzeug, L = `Länge (cm)`, v = Geschwindigkeit) |>
  filter(!is.na(Fz)) |>
  mutate(
    Datum = dmy_hms(Datum, tz = "Europe/Berlin"),
    D15 = floor_date(Datum, "15 minutes"),
    Uhrzeit = as_hms(Datum)
  )
d_unistrasse |> select(Datum, Uhrzeit, D15, Fz, L, v)
```

[]{.down40}

- Mehrere Operationen nacheinander ausgeführt
- Lesbarkeit: Jede Operation in eine eigene Zeile
- Lange Operationen nochmal aufteilen
- `select` gibt auch die Reihenfolge der Spalten an

## Damit: Plot Uhrzeit und Geschwindigkeit 

```{r}
ggplot(data = d_unistrasse) +
  geom_hex(mapping = aes(x = Uhrzeit, y = v)) 
```

[]{.down60}

- Histogramm der Geschwindigkeitsverteilung über Uhrzeit

## Bedingte Anweisung mit `if_else()`

```{r}
d_uni |> mutate(Raser = if_else(Geschwindigkeit >= 70, "Ja", "Nein")) |> select(Datum, Fahrzeug, v = Geschwindigkeit, Raser)
```

[]{.down60}

- Erster Parameter ist Bedingung
- Neue Variable `Raser` erhält Wert von zweitem Parameter, falls Bedingung erfüllt
- Falls Bedingung nicht erfüllt wird dritter Parameter verwendet

# Zusammenfassen mit `summarize()` und `group_by()`

## Wann braucht man das?

[]{.down120}

- Wenn man wissen will, wie oft eine bestimmte Beobachtung aufgetreten ist
- Wenn Durchnittswerte oder ähnliches benötigt werden

## Nur `summarize()`

```{r}
d_unistrasse |> summarise(n = n(), VMit = mean(v), VS = sd(v)) 
```

- Neue Merkmale wie bei `mutate()`
- Unterschied: Funktionen werden auf alle Werte angewendet
- Mit `n()` werden Zeilen gezählt
- Funktionen `mean()` und `sd()` wie gehabt

→ In dieser Form nicht besonders nützlich (und das können wir auch anders)

## Kombi `group_by()` und `summarize()`

```{r}
d_unistrasse |> 
  group_by(Fz) |> 
  summarise(n = n(), VMit = mean(v), VS = sd(v)) 
```

- Daten zunächst mit `group_by()` nach einem (oder mehreren Kriterien) gruppieren
- Danach wird mit `summarize()` zusammenfassen
  * Gruppierungsmerkmal(e) bleiben erhalten
  * Funktionen in `summarize()` werden auf jede Gruppe einzeln angewendet

→ In dieser Kombination **sehr** flexibel einsetzbar

## Beispiel: 15-Minuten Geschwindigkeit

```{r}
d_unistrasse_15m <- d_unistrasse |>
  group_by(D15) |>
  summarise(VMit = mean(v))
ggplot(data = d_unistrasse_15m, mapping = aes(x = D15, y = VMit)) + geom_line() + geom_point() 
```

## Effekt von `group_by()` (notwendig?)

```{r}
d_unistrasse |> str()
```

## Effekt von `group_by()` - Attribute zur Gruppierung (notwendig?)

```{r}
d_unistrasse |> group_by(Fz) |> str()
```

# Zusammenfassen und verteilen mit `pivot_longer()` und `pivot_wider()`

## Wann braucht man das?

[]{.down120}

- Zusammenfassen: Wenn Namen von Spalten Werte sein sollten
- Verteilen: Wenn Werte Namen von Spalten sein sollten

→ Manchmal sind auch beide Darstellungen notwendig

## Breite und lange Tabellen

![](bilder/table-wide-long.svg)

- Man spricht von breiten und langen Tabellenformaten
- Englisch: *Wide and long data* 
- Aufgeräumte Daten *(tidy data)* sind meistens lang

→ Immer auch abhängig von der konkreten Situation

## Beispiel: Energieträger (Quelle: BMWi)

![](bilder/table-wide.svg)

- Unpraktisch zum Plotten und Weiterverarbeiten
- Wir würden gerne
  - Die Spalte Energieträger beibehalten
  - Aus den Spaltenüberschriften 1990 bis 2017 das Merkmal Jahr machen
  - Die Werte in einem Merkmal Verbrauch speichern

## Einlesen der Daten (Quelle: BMWi)

```{r}
d_et <- read_excel("daten/energiedaten-gesamt-xls.xlsx", sheet="4", range="A8:AC17")
d_et
```

## Transformation mit `pivot_longer()`

```{r}
d_et |> pivot_longer(!Energieträger, names_to = "Jahr", values_to = "Verbrauch")
```

- Spalte(n), die beibehalten werden sollen, mit `!Name` angeben
- `names_to = Name`: Spalte für alte Spaltenüberschriften 
- `values_to = Name`: Spalte für Werte

## Beispiel vollständig

```{r}
d_energietraeger <- 
  read_excel("daten/energiedaten-gesamt-xls.xlsx", sheet="4", range="A8:AC17") |>
  pivot_longer(!Energieträger, names_to = "Jahr", values_to = "Verbrauch") |>
  mutate(Jahr = as.numeric(Jahr))
ggplot(data = d_energietraeger) +
  geom_line(mapping = aes(x = Jahr, y = Verbrauch, color = Energieträger))
```

- In einem Rutsch einlesen und weiterverarbeiten
- Jahr in Zahl konvertieren mit `mutate()`

## Werte verteilen mit `pivot_wider()`

```{r}
d_energietraeger |> pivot_wider(names_from = Energieträger, values_from = Verbrauch)
```

- `names_from = Name`: Spalte mit neuen Spaltenüberschriften
- `values_from = Name`: Spalte mit Werten, die verteilt werden sollen
- Damit transponierte der ursprünglichen Tabelle

# Dataframes verknüpfen mit `left_join()`

## Wann braucht man das?

[]{.down120}

- Wenn in einer Spalte Kürzel stehen, die in einem anderen Dataframe hinterlegt sind
- Wenn zwei Dataframes aneinandergehängt werden sollen

## Dataframes über einen Schlüssel miteinander verknüpfen

[]{.down60}

![](bilder/mitarbeiter-beispiel.svg)

[]{.down40}

- Tabellen sind über gemeinsames Merkmal (gelb) miteinander verknüpft
- Neue Tabelle mit Werten zu Verknüpfungsmerkmal
- Schlüssel in zweiter Tabelle nicht vorhanden: NAs einsetzen
- Schlüssel müssen in zweiter Tabelle eindeutig sein!

## Dataframe Mitarbeitende

```{r}
d_mitarbeiter <- read_excel("daten/mitarbeiter-beispiel.xlsx", range = "B2:E7")
kable(d_mitarbeiter)
```


## Dataframe Abteilungen

```{r}
d_abteilungen <- read_excel("daten/mitarbeiter-beispiel.xlsx", range = "G2:I7")
kable(d_abteilungen)
```

## Verknüpfung der beiden Dataframes mit `left_join()`

```{r}
#| message: false
d_mitarbeiter_1 <- d_mitarbeiter |> left_join(d_abteilungen)
kable(d_mitarbeiter_1)
```

[]{.down40}

- Dataframes müssen ein Merkmal gemeinsam haben
- Gegebenenfalls Merkmal mit `rename()` umbenennen (wie `select()`)
- Left in `left_join()`: Alle Zeilen aus linker Tabelle werden übernommen
- Andere Varianten (`inner_join()` etc.) für Spezialfälle
- Ausgabe von `left_join` unterdrücken mit `#| message: false`

## Anwendung: Kodierte Werte 1/4

![](bilder/kodierte-werte.svg)

- In den Rohdaten sind Codes eingetragen und nicht Werte 
- Warum macht man das?
  - Arbeit sparen wenn Werte von Hand eingetragen werden
  - Speicherplatz sparen bei umfangreichen Tabellen
- Für statistische Auswertung: Dataframe mit Werten

## Anwendung: Kodierte Werte 2/4

```{r}
d_ud <- read_excel("daten/beispiel-kodierung.xlsx", range="B2:D5")
kable(d_ud)
```

## Anwendung: Kodierte Werte 3/4

```{r}
d_ud_k1 <- read_excel("daten/beispiel-kodierung.xlsx", range="F2:G5")
kable(d_ud_k1)
```

```{r}
d_ud_k2 <- read_excel("daten/beispiel-kodierung.xlsx", range="I2:J5")
kable(d_ud_k2)
```

## Anwendung: Kodierte Werte 4/4

```{r}
#| message: false
d_ud |>
  left_join(d_ud_k1) |>
  left_join(d_ud_k2) |>
  select(-ends_with("_code")) |>
  kable()
```

- Unfalldaten mit beiden Kodierungstabellen verknüpfen
- Spalten mit den Codes löschen

# Dataframes aneinanderhängen `bind_rows()`/`bind_cols()`

## Dataframes aneinander hängen {.smaller}

```{r}
d1 <- tibble(X = c("A", "B"), Y = c(1, 2))
d2 <- tibble(X = "C", Y = 3)
d3 <- tibble(Z = c(1.7, 2.9))
```

::::: columns
::: {.column}
```{r}
kable(d1)
```
:::
::: {.column}
```{r}
kable(d2)
```
:::
::: {.column}
```{r}
kable(d3)
```
:::
:::::

::::: columns
::: {.column}
```{r}
d1 |> bind_cols(d3) |> kable()
```
:::

::: {.column}
```{r}
d1 |> bind_rows(d2) |> kable()
```
:::
:::::

-   Mit `bind_cols()` Dataframes nebeneinander *(column-bind)*
    -   Anzahl der Beobachtungen müssen gleich sein!
-   Mit `bind_rows()` Dataframes hintereinander *(row-bind)*
    -   Merkmale müssen gleich sein!

# Verschiedenes

## Werte durch NAs ersetzen 1/4

![](bilder/fehlwerte-niederschlag.svg){fig-align=center}

Niederschlagsdaten vom Deutschen Wetterdienst

- Wert -999 kennzeichnet eine fehlende Beobachtung
- In R sollte das ein `NA` sein

## Werte durch NAs ersetzen 2/4

```{r}
d_ns <- read_delim(
  "daten/produkt_nieder_monat_18910101_20171231_00555-2.txt",
  delim = ";", , trim_ws=TRUE,
  locale = locale(decimal_mark = ".", grouping_mark = ",")
)
```

## Werte durch NAs ersetzen 3/4

```{r}
d_ns
```

- Wert -999 in fast allen Spalten
- Damit kann man nicht arbeiten

## Werte durch NAs ersetzen 4/4

```{r}
d_ns |> mutate(MO_NSH = na_if(MO_NSH, -999)) 
```

- Mit `na_if(Y, x)` alle Werte `x` in Spalte `Y` durch `NA` ersetzen

## Werte auftrennen 1/2

```{r}
d_z <- tibble(X = c("10, A, 4.3", "11, X, 1.9", "2, R, 3.3"))
kable(d_z)
```

- Drei Werte in jeder Beobachtung

## Werte auftrennen 2/2

```{r}
d_z |> separate(col=X, into=c("Wert", "Name", "Laenge"), sep=",") |> kable()
```

- Funktion `separate(...)` verteilt Werte auf Spalten
- Spalte mit Ausgangswerten angeben mit `col`
- Neue Spalten in Parameter `into` (Namen als Zeichenkette)
- Mit `sep` angeben, welches Zeichen die Einträge trennt

## Gruppiertes `mutate()` 1/2

```{r}
d_energietraeger |> kable() |> scroll_box(height = "400px")
```

- Ziel: Neue Variable mit dem anteiligen Energieverbrauch
  - 100 x Energieverbrauch / Gesamtverbrauch im Jahr

## Gruppiertes `mutate()` 2/2

```{r}
d_energietraeger |>
  group_by(Jahr) |>
  mutate(Anteil = 100 * Verbrauch / sum(Verbrauch)) |>
  kable() |> scroll_box(height = "300px")
```

- Daten nach Jahren gruppieren
- Dann berechnet `sum()` die Summe in einer Gruppe
- Ergebnis auf jeden Fall kontrollieren

## Gruppiertes `filter()` 1/2

```{r}
d_unistrasse
```

- Gesucht ist das schnellste Fahrzeug aus jeder Gruppe

## Gruppiertes `filter()` 2/2

```{r}
d_unistrasse |> select(-D15) |>
  group_by(Fz) |>
  filter(v == max(v)) |>
  kable()
```

- Nach Fahrzeugtyp gruppieren
- Mit `max(Geschwindigkeit)` die schnellste Messung pro Gruppe heraussuchen
- Beobachtung mit der größten Geschwindigkeit herausfiltern

## Werte ersetzen mit `recode()` 1/2 {.smaller}

```{r}
kable(d_et)
```

- Bezeichnungen teilweise zu lang
- Verweise auf Erläuterungen für statistische Auswertung nicht hilfreich

## Werte ersetzen mit `recode()` 2/2 {.smaller}

```{r}
d_et |> mutate(
    Energieträger = recode(
      Energieträger, 
      "Erdgas, Erdölgas" = "Gas",
      "Wasser- und Windkraft 1) 3)" = "Wasser/Wind",
      "andere Erneuerbare 2)" = "andere Erneuerbare"
    )
  ) |>
  kable()
```

- Spalte und Ersetzungen angeben
