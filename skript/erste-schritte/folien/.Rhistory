#| echo: false
# Dataframes für Deutschlandkarte
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
#| echo: false
#| warning: false
#| message: false
library(sf)
library(giscoR)
library(lubridate)
library(patchwork)
library(tidyverse)
source("skripte/read-data-erste-schritte.R")
#| echo: false
# Dataframes für Deutschlandkarte
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
d_bl <- gisco_get_nuts(country = "Germany", nuts_level = 2, resolution = 03)
# Dataframes für ausgewählte Stationen und Jahreswerte
d_stat_a <- d_stat |> filter(Station %in% unique(d_ns$Station))
d_ns_jahr <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr) |>
summarise(n = n(), Niederschlag = sum(Niederschlag)) |>
filter(n >= 365) |>
summarise(n = n(), Niederschlag = mean(Niederschlag)) |>
ungroup()
# Plot auf Landkarte
p1 <- ggplot() +
geom_sf(data = d_bl, fill = NA, color = "lightcoral", linewidth = 0.5) +
geom_sf(data = d_de, fill = NA, color = "slategray", linewidth = 0.75) +
geom_sf(data = d_stat, alpha = 0.2) +
geom_sf(
data = d_stat_a, mapping = aes(fill = Station),
shape = 21, color = "black", size = 2.5, show.legend = FALSE
) +
theme_void()
# Plot der Niederschläge
p2 <- ggplot(data = d_ns_jahr) +
geom_col(
mapping = aes(x = reorder(Station, desc(Niederschlag)), y = Niederschlag, fill = Station),
color = "black", show.legend = FALSE
) +
labs(title = "Mittlerer jährlicher Niederschlag", x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
# Darstellen
p1 + p2
View(d_stat_a)
View(d_ns_jahr)
View(d_ns)
#| echo: false
d_ns_monat <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr, Monat) |>
summarise(n = n(), Niederschlag = sum(Niederschlag))
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag)) +
labs(title = "Monatliche Niederschläge (alle Stationen)")
#| echo: false
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag, fill = Station)) +
labs(title = "Monatliche Niederschläge (nach Stationen)")
#| echo: false
#| warning: false
#| message: false
library(sf)
library(giscoR)
library(lubridate)
library(patchwork)
library(tidyverse)
source("skripte/read-data-erste-schritte.R")
#| echo: false
# Dataframes für Deutschlandkarte
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
d_bl <- gisco_get_nuts(country = "Germany", nuts_level = 2, resolution = 03)
# Dataframes für ausgewählte Stationen und Jahreswerte
d_stat_a <- d_stat |> filter(Station %in% unique(d_ns$Station))
d_ns_jahr <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr) |>
summarise(n = n(), Niederschlag = sum(Niederschlag)) |>
filter(n >= 365) |>
summarise(n = n(), Niederschlag = mean(Niederschlag)) |>
ungroup()
# Plot auf Landkarte
p1 <- ggplot() +
geom_sf(data = d_bl, fill = NA, color = "lightcoral", linewidth = 0.5) +
geom_sf(data = d_de, fill = NA, color = "slategray", linewidth = 0.75) +
geom_sf(data = d_stat, alpha = 0.2) +
geom_sf(
data = d_stat_a, mapping = aes(fill = Station),
shape = 21, color = "black", size = 2.5, show.legend = FALSE
) +
theme_void()
# Plot der Niederschläge
p2 <- ggplot(data = d_ns_jahr) +
geom_col(
mapping = aes(x = reorder(Station, desc(Niederschlag)), y = Niederschlag, fill = Station),
color = "black", show.legend = FALSE
) +
labs(title = "Mittlerer jährlicher Niederschlag", x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
# Darstellen
p1 + p2
#| echo: false
d_ns_monat <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr, Monat) |>
summarise(n = n(), Niederschlag = sum(Niederschlag))
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag)) +
labs(title = "Monatliche Niederschläge (alle Stationen)")
#| echo: false
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag, fill = Station)) +
labs(title = "Monatliche Niederschläge (nach Stationen)")
#| echo: false
#| warning: false
#| message: false
library(sf)
library(giscoR)
library(lubridate)
library(patchwork)
library(tidyverse)
source("skripte/read-data-erste-schritte.R")
#| echo: false
# Dataframes für Deutschlandkarte
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
d_bl <- gisco_get_nuts(country = "Germany", nuts_level = 2, resolution = 03)
# Dataframes für ausgewählte Stationen und Jahreswerte
d_stat_a <- d_stat |> filter(Station %in% unique(d_ns$Station))
d_ns_jahr <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr) |>
summarise(n = n(), Niederschlag = sum(Niederschlag)) |>
filter(n >= 365) |>
summarise(n = n(), Niederschlag = mean(Niederschlag)) |>
ungroup()
# Plot auf Landkarte
p1 <- ggplot() +
geom_sf(data = d_bl, fill = NA, color = "lightcoral", linewidth = 0.5) +
geom_sf(data = d_de, fill = NA, color = "slategray", linewidth = 0.75) +
geom_sf(data = d_stat, alpha = 0.2) +
geom_sf(
data = d_stat_a, mapping = aes(fill = Station),
shape = 21, color = "black", size = 2.5, show.legend = FALSE
) +
theme_void()
# Plot der Niederschläge
p2 <- ggplot(data = d_ns_jahr) +
geom_col(
mapping = aes(x = reorder(Station, desc(Niederschlag)), y = Niederschlag, fill = Station),
color = "black", show.legend = FALSE
) +
labs(title = "Mittlerer jährlicher Niederschlag", x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
# Darstellen
p1 + p2
#| echo: false
d_ns_monat <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr, Monat) |>
summarise(n = n(), Niederschlag = sum(Niederschlag))
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag)) +
labs(title = "Monatliche Niederschläge (alle Stationen)")
#| echo: false
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag, fill = Station)) +
labs(title = "Monatliche Niederschläge (nach Stationen)")
#| echo: false
#| warning: false
#| message: false
library(sf)
library(giscoR)
library(lubridate)
library(patchwork)
library(tidyverse)
source("skripte/read-data-erste-schritte.R")
#| echo: false
# Dataframes für Deutschlandkarte
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
d_bl <- gisco_get_nuts(country = "Germany", nuts_level = 2, resolution = 03)
# Dataframes für ausgewählte Stationen und Jahreswerte
d_stat_a <- d_stat |> filter(Station %in% unique(d_ns$Station))
d_ns_jahr <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr) |>
summarise(n = n(), Niederschlag = sum(Niederschlag)) |>
filter(n >= 365) |>
summarise(n = n(), Niederschlag = mean(Niederschlag)) |>
ungroup()
# Plot auf Landkarte
p1 <- ggplot() +
geom_sf(data = d_bl, fill = NA, color = "lightcoral", linewidth = 0.5) +
geom_sf(data = d_de, fill = NA, color = "slategray", linewidth = 0.75) +
geom_sf(data = d_stat, alpha = 0.2) +
geom_sf(
data = d_stat_a, mapping = aes(fill = Station),
shape = 21, color = "black", size = 2.5, show.legend = FALSE
) +
theme_void()
# Plot der Niederschläge
p2 <- ggplot(data = d_ns_jahr) +
geom_col(
mapping = aes(x = reorder(Station, desc(Niederschlag)), y = Niederschlag, fill = Station),
color = "black", show.legend = FALSE
) +
labs(title = "Mittlerer jährlicher Niederschlag", x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
# Darstellen
p1 + p2
#| echo: false
d_ns_monat <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr, Monat) |>
summarise(n = n(), Niederschlag = sum(Niederschlag))
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag)) +
labs(title = "Monatliche Niederschläge (alle Stationen)")
#| echo: false
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag, fill = Station)) +
labs(title = "Monatliche Niederschläge (nach Stationen)")
library(yaml)
library(purrr)
library(yaml)
library(purrr)
library(readr)
library(tools)
library(stringr)
# Message
cat("Collecting content...\n")
# Message
cat("Collecting content...\n")
# Message
cat("Collecting content...\n")
# Read YAML file
yaml <- read_yaml("content.yml")
#!/usr/bin/env Rscript
library(yaml)
library(purrr)
library(readr)
library(tools)
library(stringr)
# Used but not importet because of naming conflicts
# library(zip)
# library(here)
# -------------------------------------------------------------------------------------------------
# Helper functions
# -------------------------------------------------------------------------------------------------
is_true <- function(b) !is.null(b) && b
test_include <- function(path, exclude_patterns) {
for (p in exclude_patterns) {
if (str_detect(path, p)) {
return(FALSE)
}
}
file_test("-f", path)
}
prepare_copy_to <- function(to, overwrite) {
if (file.exists(to) && !is_true(overwrite)) stop("File exists: ", to)
folder <- dirname(to)
if (!dir.exists(folder)) dir.create(folder, recursive = TRUE)
}
file_copy_safe <- function(from, to, overwrite) {
prepare_copy_to(to, overwrite)
file.copy(from, to)
}
# -------------------------------------------------------------------------------------------------
# Job functions
# -------------------------------------------------------------------------------------------------
copy_job_do <- function(from, to, exclude_patterns = NULL, overwrite = FALSE, optional = FALSE) {
if (file_test("-f", from)) { # Copy one file
file_copy_safe(from, to, overwrite)
} else if (file_test("-d", from)) { # Copy folder
for (f in list.files(from)) {
from_path <- file.path(from, f)
if (test_include(from_path, exclude_patterns)) file_copy_safe(from_path, file.path(to, f), overwrite)
}
} else if (!is_true(optional)) { # Don't know
stop("No such file or directory: ", from)
}
}
copy_job <- function(job) {
copy_job_do(
substitute_definitions(job$from),
substitute_definitions(job$to),
job$`exclude-patterns`,
job$overwrite,
job$optional
)
}
zip_job <- function(job) {
#
# Definitions
zipfile <- substitute_definitions(job$zipfile)
folder <- substitute_definitions(job$folder)
root <- substitute_definitions(job$root)
# Create path to zipfile if needed
zipfile_path <- dirname(zipfile)
if (!dir.exists(zipfile_path)) {
dir.create(zipfile_path, recursive = TRUE)
}
# Zip
zip::zip(zipfile, folder, root = root)
}
delete_job <- function(job) {
folder <- substitute_definitions(job$folder)
unlink(folder, recursive = TRUE)
}
do_assignments <- function(pwps, with_solution) {
#
# Process files
# pwp stands for path with pattern
for (pwp in pwps) {
pwp <- substitute_definitions(pwp)
folder <- dirname(pwp)
pattern <- basename(pwp)
for (file in list.files(path = folder, pattern = pattern)) {
file_sol <- str_replace(file, fixed(".qmd"), ".sol.qmd")
is_solution <- str_detect(file, fixed(".sol."))
have_solution <- file.exists(file.path(folder, file_sol))
if (!is_solution) {
#
# Cat assignment
cat(read_lines(file.path(folder, file)), sep = "\n")
cat("\n")
# Announce solution
if (with_solution) {
cat("### Lösung {-}\n\n")
if (!have_solution) cat("Keine Lösung\n\n")
}
} else if (with_solution) {
#
# Cat solution
cat(read_lines(file.path(folder, file)), sep = "\n")
cat("\n")
}
}
}
}
assignment_paper_job <- function(job) {
define("sol", job$sol)
define("subtitle", job$subtitle)
# Assignment papers
sink(substitute_definitions("${target-folder}/aufgabenblatt-${idx}.qmd"))
cat(substitute_definitions("${assignment-header}"))
cat("\n")
do_assignments(job$files, with_solution = FALSE)
sink()
# Solutions
sink(substitute_definitions("${target-folder}/aufgabenblatt-${idx}-loesung-${sol}.qmd"))
cat(substitute_definitions("${assignment-solution-header}"))
cat("\n")
do_assignments(job$files, with_solution = TRUE)
sink()
# Folders XXX
for (pwp in job$folders) {
pwp <- substitute_definitions(pwp)
folder <- dirname(pwp)
pattern <- basename(pwp)
for (e in list.files(path = folder, pattern = pattern)) {
from <- file.path(folder, e)
to <- file.path(substitute_definitions("${target-folder}"), e)
if (file_test("-d", from)) copy_job_do(from, to)
}
}
}
increment_index_job <- function(job) increment_index()
jobs <- list(
"copy" = copy_job,
"zip" = zip_job,
"delete" = delete_job,
"assignment-paper" = assignment_paper_job,
"increment-index" = increment_index_job
)
handle_job <- function(job) jobs[[names(job)[[1]]]](job)
# -------------------------------------------------------------------------------------------------
# Definitions and index
# -------------------------------------------------------------------------------------------------
# Definitions
definitions <- list()
define <- function(var, val) definitions[[var]] <<- val
substitute_definitions <- function(s) {
changed <- TRUE
while (changed) {
changed <- FALSE
for (key in names(definitions)) {
value <- definitions[[key]]
if (length(value)) {
s_old <- s
var <- paste0("${", key, "}")
s <- str_replace_all(s, fixed(var), value)
if (s != s_old) changed <- TRUE
}
}
}
s
}
# Index
idx <- 0
reset_index <- function() {
idx <<- 0
increment_index()
}
increment_index <- function() {
idx <<- idx + 1
define("sidx", idx)
define("idx", str_pad(idx, 2, side = "left", pad = "0"))
}
# -------------------------------------------------------------------------------------------------
# Process input
# -------------------------------------------------------------------------------------------------
# Message
cat("Collecting content...\n")
# Read YAML file
yaml <- read_yaml("content.yml")
#
# Cat solution
cat(read_lines(file.path(folder, file)), sep = "\n")
# Index
idx <- 0
reset_index <- function() {
idx <<- 0
increment_index()
}
increment_index <- function() {
idx <<- idx + 1
define("sidx", idx)
define("idx", str_pad(idx, 2, side = "left", pad = "0"))
}
# Message
cat("Collecting content...\n")
# Read YAML file
yaml <- read_yaml("content.yml")
target_folder <- yaml$`target-folder`
deploy_folder <- here::here(yaml$`deploy-folder`)
#| echo: false
#| warning: false
#| message: false
library(sf)
library(giscoR)
library(lubridate)
library(patchwork)
library(tidyverse)
source("skripte/read-data-erste-schritte.R")
#| echo: false
# Dataframes für Deutschlandkarte
d_de <- gisco_get_nuts(country = "Germany", nuts_level = 0, resolution = 03)
d_bl <- gisco_get_nuts(country = "Germany", nuts_level = 2, resolution = 03)
# Dataframes für ausgewählte Stationen und Jahreswerte
d_stat_a <- d_stat |> filter(Station %in% unique(d_ns$Station))
d_ns_jahr <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr) |>
summarise(n = n(), Niederschlag = sum(Niederschlag)) |>
filter(n >= 365) |>
summarise(n = n(), Niederschlag = mean(Niederschlag)) |>
ungroup()
# Plot auf Landkarte
p1 <- ggplot() +
geom_sf(data = d_bl, fill = NA, color = "lightcoral", linewidth = 0.5) +
geom_sf(data = d_de, fill = NA, color = "slategray", linewidth = 0.75) +
geom_sf(data = d_stat, alpha = 0.2) +
geom_sf(
data = d_stat_a, mapping = aes(fill = Station),
shape = 21, color = "black", size = 2.5, show.legend = FALSE
) +
theme_void()
# Plot der Niederschläge
p2 <- ggplot(data = d_ns_jahr) +
geom_col(
mapping = aes(x = reorder(Station, desc(Niederschlag)), y = Niederschlag, fill = Station),
color = "black", show.legend = FALSE
) +
labs(title = "Mittlerer jährlicher Niederschlag", x = NULL, y = NULL) +
theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
# Darstellen
p1 + p2
#| echo: false
d_ns_monat <- d_ns |>
filter(!is.na(Niederschlag)) |>
group_by(Station, Jahr, Monat) |>
summarise(n = n(), Niederschlag = sum(Niederschlag))
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag)) +
labs(title = "Monatliche Niederschläge (alle Stationen)")
#| echo: false
ggplot(data = d_ns_monat) +
geom_boxplot(mapping = aes(x = Monat, y = Niederschlag, fill = Station)) +
labs(title = "Monatliche Niederschläge (nach Stationen)")
