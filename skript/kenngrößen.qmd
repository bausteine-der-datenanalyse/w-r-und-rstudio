---
title: "Kenngrößen und Beschreibung von Verteilungen in R"
---

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(kableExtra)
library(ineq)

# TODO: source("_common.R")
outline_color <- "black"
update_geom_defaults("bar", list(color = outline_color))
update_geom_defaults("point", list(color = outline_color))
update_geom_defaults("boxplot", list(color = outline_color))
update_geom_defaults("dotplot", list(color = outline_color))
update_geom_defaults("ribbon", list(color = outline_color))
theme_set(theme_gray(base_size = 14))

load("daten/kenngroessen.Rdata")
```


## Übersicht Dataframes für diese Folien

[]{.down100}

| Name                    | Inhalt                                           |
|-------------------------|--------------------------------------------------|
| `d_ns_m`                | Monatswerte für Niederschläge in Bochum          |
| `d_ns_m_2008`           | Monatswerte im Jahr 2008 (Bochum)                |
| `d_ns_m_2010`           | Monatswerte im Jahr 2010 (Bochum)                |
| `d_ns_m_0810`           | Monatswerte in den Jahren 2008 und 2010 (Bochum) |
| `d_ns_m_nha_trang_2015` | Monatswerte der Niederschläge in Nha Trang 2015  |

Quellen: <https://www.dwd.de> und <https://www.gso.gov.vn>


# Kenngrößen von Verteilungen berechnen


## Berechnung von Kenngrößen {.smaller}

[]{.down40}

### Lagemaße

| Funktion    | Berechnet             |
|-------------|-----------------------|
| `mean(x)`   | Arithmetisches Mittel |
| `median(x)` | Median                |

Keine eingebauten Funktionen für Modus und geometrisches/harmonisches Mittel (selber definieren)

[]{.down40}

### Streumaße

| Funktion          | Berechnet                                 |
|-------------------|-------------------------------------------|
| `max(x) - min(x)` | Spannweite $R$                            |
| `var(x)`          | Empirische Varianz $\tilde{s}^2$          |
| `sd(x)`           | Empirische Standardabweichung $\tilde{s}$ |

Variationskoeffizient $v$ aus `sd(x)/mean(x)` berechnen, keine eingebaute Funktion für AD-Streuung


## Spalten von Dataframes mit `$` {.smaller}

### Dataframe

::::: columns
::: {.column width="50%"}
```{r}
d <- tibble(
  A = c(1, 2, 3, 4, 5, 6), 
  B = c(1, 2, 1, 2, 1, 2)
)
```
:::

::: {.column width="50%"}
```{r}
kable(d)
```
:::
:::::

### Auswahl der Spalten der beiden Merkmale

::::: columns
::: {.column width="50%"}
```{r}
d$A
```
:::

::: {.column width="50%"}
```{r}
d$B
```
:::
:::::

$\rightarrow$ Merkmal `X` von Dataframe `d` als Array (hier Verweis zu Basics von R $\rightarrow$ Was ist ein Array?) mit `d$X`


## Kenngrößen für Merkmale {.smaller}

::::: columns
::: {.column width="50%"}
### Merkmal A

#### Lagemaße

```{r}
mean(d$A)
median(d$A)
```

#### Streumaße

```{r}
max(d$A) - min(d$A)
var(d$A)
sd(d$A)
```
:::

::: {.column width="50%"}
### Merkmal B

#### Lagemaße

```{r}
mean(d$B)
median(d$B)
```

#### Streumaße

```{r}
max(d$B) - min(d$B)
var(d$B)
sd(d$B)
```
:::
:::::


## Kenngrößen von *echten* Daten berechnen am Beispiel Niederschlag in Bochum {.smaller}

### Beobachtungszeitraum: Spannweite von Merkmal `Jahr`

```{r}
max(d_ns_m$Jahr) - min(d_ns_m$Jahr)
```

### Mittelwert, Median und Standardabweichung

::::: columns
::: {.column width="50%"}
#### Im Jahr 2008

```{r}
mean(d_ns_m_2008$Niederschlag)
median(d_ns_m_2008$Niederschlag)
sd(d_ns_m_2008$Niederschlag)
```
:::

::: {.column width="50%"}
#### Im Jahr 2010

```{r}
mean(d_ns_m_2010$Niederschlag)
median(d_ns_m_2010$Niederschlag)
sd(d_ns_m_2010$Niederschlag)
```
:::
:::::

(Zahlenwerte aus dem Skript)


# Bestimmte Werte darstellen mit `geom_vline()` und `geom_hline()`

vline wie vertical line = vertikale Linie und

hline wie horizontal line = horizontale Linie


## Minimalbeispiel (mit Dataframe)

```{r}
d <- tibble(A = c(1, 2, 3), B = c(0, 4, 5))
ggplot(data = d) + 
  geom_hline(mapping = aes(yintercept = A)) + geom_vline(mapping = aes(xintercept = B))
```

- Schnittpunkte mit Achsen via `xintercept` bzw. `yintercept`


## Minimalbeispiel (mit Zahlenwerten)

```{r}
ggplot() + 
  geom_hline(yintercept = c(1, 2, 3)) + geom_vline(xintercept = c(0, 4, 5)) 
```

- Werte können auch direkt angegeben werden (anstatt aus Dataframe)
- Dann kein Mapping erforderlich


## Bestimmte Werte bei *echten* Daten darstellen


### Histogramm mit Mittelwert

```{r}
ggplot(data = d_ns_m) +
  geom_histogram(mapping = aes(x = Niederschlag), binwidth = 10, boundary = 0) +
  geom_vline(xintercept = mean(d_ns_m$Niederschlag), color = 'red')
```

- Ohne `c(...)` wenn nur ein Wert dargestellt werden soll
- Linienfarbe mit `color`

##

### Mit empirischer Verteilungsfunktion

```{r}
ggplot(data = d_ns_m) +
  geom_step(mapping = aes(x = Niederschlag), stat = "ecdf") +
  geom_hline(yintercept = c(0.2, 0.5, 0.9), color = 'blue')
```

##

### Monatsniederschläge mit Mittelwert

```{r, out.width="80%", fig.height=2.25}
ggplot(data=d_ns_m_0810) + 
  geom_hline(yintercept = mean(d_ns_m_0810$Niederschlag)) +
  geom_line(mapping=aes(x=Monat,y=Niederschlag,group=Jahr,color=Jahr)) + 
  geom_point(mapping=aes(x=Monat, y=Niederschlag, color=Jahr))
```

- 3 Layer übereinander, Reihenfolge beachten
- Linien mit `geom_line()` (später im Detail, hier Verweis, wo zu finden)

##

### Abweichungen vom Mittelwert

```{r, out.width="80%", fig.height=2.25}
nmw <- mean(d_ns_m_0810$Niederschlag)
ggplot(data=d_ns_m_0810) + 
  geom_col(mapping = aes(x = Monat, y = Niederschlag - nmw, fill = Jahr))
```

- Säulen nebeneinander mit `position = "dodge"`


# Quantile berechnen mit `quantile()`


## Funktion `quantile()`

```{r}
d <- tibble(X = c(1,2,2,4,4,6,6,6,9,10,10,12,13,13,13,16,17,18,19,20))
quantile(d$X, probs = c(0.2, 0.25, 0.5, 0.9), type=2)
```

[]{.down40}

### Funktionsweise

- Gesuchte Quantilen mit `probs = c(...)` angeben
- probs wie probabilities = Wahrscheinlichkeiten
- Es gibt verschiedene Definitionen der Quantilwerte
- Unsere Definition mit `type = 2`
- Ergebnis ist ein *Named Vector* (Verweis Basics, was das bedeutet)

## Quantile und empirische Verteilungsfunktion

```{r}
p <- c(0.2, 0.25, 0.5, 0.9)
q <- quantile(d$X, p, type=2)
ggplot(data = d) +
  geom_hline(yintercept = p,color = 'blue') + geom_vline(xintercept = q, color = 'red') +
  geom_step(mapping = aes(x = X), stat = "ecdf") 
```

- Werte und Quantile in Variablen `p` und `q`


# Boxplots mit `geom_boxplot()` am Beispiel Niederschlag in Bochum


## Monatliche Niederschläge (alle Jahre)

```{r, fig.height = 3}
ggplot(data = d_ns_m) +
  geom_boxplot(mapping = aes(y = Niederschlag))
```

- Merkmal für y-Koordinate


## Monatliche Niederschläge (Jahre 2008 und 2010)

```{r, fig.height = 3}
ggplot(data = d_ns_m_0810) +
  geom_boxplot(mapping = aes(x = Jahr, y = Niederschlag))
```

- Mehrere Boxplots mit Angabe von Merkmal für x-Koordinate
- Funktioniert nur für diskretes Merkmal (Details später, Verweis wo)


## Monatliche Niederschläge (alle Jahre einzeln) 1/2

```{r, fig.height = 3}
ggplot(data = d_ns_m) +
  geom_boxplot(mapping = aes(x = Jahr, y = Niederschlag))
```

### Warum funktioniert das nicht?

- Merkmal `Jahr` jetzt mit vielen verschiedenen Ausprägungen
- Für ggplot ist das dann ein kontinuierliches Merkmal
- Angabe von `x` wird ignoriert, nur eine Box!


## Monatliche Niederschläge (alle Jahre einzeln) 2/2

```{r, fig.height = 3}
ggplot(data = d_ns_m) +
  geom_boxplot(mapping = aes(x = factor(Jahr), y = Niederschlag))
```

- Mit `factor(Jahr)` kennzeichnen, dass `Jahr` diskretes Merkmal


# Lorenzkurve am Beispiel aus dem Skript

Aus dem Paket `ineq` (installieren)


## Lorenzkurve berechnen

```{r}
d <- tibble(A = c(4, 4, 4, 4, 4), B = c(1, 1, 1, 1, 16), C = c(2, 3, 4, 5, 6))
lc_A <- Lc(d$A)
lc_B <- Lc(d$B)
lc_C <- Lc(d$C)
```

- Funktion `Lc` aus Paket `ineq`

## Ergebnis

```{r}
lc_B$p
lc_B$L
```

- Koordinaten $u_j$ mit `$p` und $v_j$ mit `$L`

## Als Dataframe (Details später)

Funktion um Ergebnis von `Lc` in Dataframe zu konvertieren

```{r}
lc_to_tibble <- function(lc) {
  tibble(u = lc$p, v = lc$L)
}
```

Beispiel

```{r}
kable(lc_to_tibble(lc_B))
```

- Eigene Funktion um Dataframe aus Ergebnis von `Lc` zu erzeugen
- Details hierzu später


# Bänder mit `geom_ribbon()`

- ribbon wie Band $\rightarrow$ ein Flächenband zwischen zwei Linien


## Minimalbeispiel 1/2

```{r}
d <- tibble(A = c(1, 2, 3, 4), B = c(0, 0, 1, 2), C = c(3, 5, 6, 6))
ggplot(data = d) + geom_ribbon(mapping = aes(x = A, ymin = B, ymax = C))
```

- Plottet Bereich zwischen Wertepaaren


## Minimalbeispiel 2/2

```{r}
ggplot(data = d) +
  geom_ribbon(mapping = aes(x = A, ymax = C, ymin = 0))
```

- Es kann auch ein fester Wert angegeben werden
- Anmerkung: Das geht auch mit anderen Geoms

## Lorenzkurve Merkmal A (Skript S.45)

```{r}
ggplot(data = lc_to_tibble(lc_A)) +
  geom_ribbon(mapping = aes(x = u, ymin = v, ymax = u), color = 'black', fill = 'light blue') +
  geom_point(mapping = aes(x = u, y = v))
```

- Farben mit `color` und `fill`

## Lorenzkurve Merkmal B (Skript S.45)

```{r}
ggplot(data = lc_to_tibble(lc_B)) +
  geom_ribbon(mapping = aes(x = u, ymin = v, ymax = u), color = 'black', fill = 'linen') +
  geom_point(mapping = aes(x = u, y = v))
```

- Farben mit `color` und `fill`

## Lorenzkurve Merkmal C (Skript S.45)

```{r}
ggplot(data = lc_to_tibble(lc_C)) +
  geom_ribbon(mapping = aes(x = u, ymin = v, ymax = u), color = 'black', fill = 'linen') +
  geom_point(mapping = aes(x = u, y = v))
```

- Farben mit `color` und `fill`

## Lorenzkurven mit *echten* Daten

### Niederschläge Bochum (2008)

```{r}
lc_bochum <- Lc(d_ns_m_2008$Niederschlag)
ggplot(data = lc_to_tibble(lc_bochum)) +
  geom_ribbon(mapping = aes(x = u, ymin = v, ymax = u), color = 'black', fill = 'linen') +
  geom_point(mapping = aes(x = u, y = v))
```

##

### Niederschläge Nha Trang (2015)

```{r}
lc_nha_trang <- Lc(d_ns_m_nha_trang_2015$Niederschlag)
ggplot(data = lc_to_tibble(lc_nha_trang)) +
  geom_ribbon(mapping = aes(x = u, ymin = v, ymax = u), color = 'black', fill = 'linen') +
  geom_point(mapping = aes(x = u, y = v))
```

# Gini-Koeffizient

Wieder aus dem Paket `ineq` (jetzt installiert)

## Minimalbeispiel

```{r}
Gini(c(0, 0, 0, 0, 1))
Gini(c(1, 1, 1, 2, 3))
Gini(c(1, 1, 1, 1, 1))
Gini(c(1, 1, 1, 1, 1))
```

- Berechnung des Gini-Koeffizienten mit `Gini(<Werte>)`
- Der Wert wird **nicht** normiert
- Normierung auf $G^*$ falls notwendig mit Faktor `n/(n-1)`

## Niederschläge

### Gini-Koeffizienten Bochum und Nha Trang

```{r}
Gini(d_ns_m_2008$Niederschlag)
Gini(d_ns_m_nha_trang_2015$Niederschlag)
```

[]{.down40}

### Lorenz-Münzer-Koeffizienten Bochum und Nha Trang

```{r}
12/11*Gini(d_ns_m_2008$Niederschlag)
12/11*Gini(d_ns_m_nha_trang_2015$Niederschlag)
```

# Zusammenfassung

## Linien: `geom_hline()` & `geom_vline()`

### Werte aus Dataframe

```{r, eval=FALSE}
ggplot(data = d) + 
  geom_hline(mapping = aes(yintercept = <M>), Argumente) +
  geom_vline(mapping = aes(xintercept = <M>), Argumente)
```

### Werte direkt angegeben

```{r, eval=FALSE}
ggplot() + 
  geom_hline(yintercept = c(...), Argumente) +
  geom_vline(xintercept = c(...), Argumente)
```

| AES/Argumente | Beschreibung              | Optional |
|---------------|---------------------------|----------|
| xintercept    | Schnittpunkte mit x-Achse | Nein     |
| yintercept    | Schnittpunkte mit y-Achse | Nein     |
| color         | Linienfarbe               | Ja       |
| size          | Linienstärke              | Ja       |

: {tbl-colwidths="[20,50,30]"}

## Boxplots mit `geom_boxplot()`

```{r, eval=FALSE}
ggplot(data = d) +
  geom_boxplot(mapping = aes(x = <M>, y = <M>), Argumente)
```

[]{.down40}

| AES | Beschreibung                         | Optional |
|-----|--------------------------------------|----------|
| x   | Merkmal für x-Achse (diskret)        | Ja       |
| y   | Merkmal, das dargestellt werden soll | Nein     |

: {tbl-colwidths="[20,50,30]"}

[]{.down40}

| Argumente | Beschreibung                                           |
|-----------|--------------------------------------------------------|
| varwidth  | Breite entsprechend Anzahl Werte (TRUE oder **FALSE**) |

: {tbl-colwidths="[20,80]"}

## Bänder mit `geom_ribbon()`

```{r, eval=FALSE}
ggplot(data = d) +
  geom_ribbon(mapping = aes(x = <M>, ymin = <M>, ymax = <M>), Argumente)
```

| AES  | Beschreibung         | Optional |
|------|----------------------|----------|
| x    | Position auf x-Achse | Nein     |
| ymin | Unterer Wert         | Nein     |
| ymax | Oberer Wert          | Nein     |

: {tbl-colwidths="[20,50,30]"}

[]{.down40}

| Argumente | Beschreibung |
|-----------|--------------|
| color     | Linienfarbe  |
| fill      | Füllfarbe    |

: {tbl-colwidths="[20,80]"}