{
  "hash": "4f589fffbc0a479d2c08ff4c0bf4eeec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mehrere Datensätze\"\n---\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n```\n\n\n:::\n:::\n\n\n\n## Häufige Problemstellung\n\n- Daten auf mehrere Dateien verteilt\n\n- Im Beispiel hier: Niederschlagsdaten von drei Stationen\n\n\n## Erste Möglichkeit: Copy und Paste\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1 <- read_delim(\n  \"daten/produkt_nieder_tag_18850601_20171231_05344.txt\", \n  delim = \";\", locale = locale(decimal_mark = \".\"), trim_ws = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 44742 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): eor\ndbl (6): STATIONS_ID, MESS_DATUM, QN_6, RS, RSF, SH_TAG\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd2 <- read_delim(\n  \"daten/produkt_nieder_tag_19210101_20171231_01443.txt\", \n  delim = \";\", locale = locale(decimal_mark = \".\"), trim_ws = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30146 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): eor\ndbl (6): STATIONS_ID, MESS_DATUM, QN_6, RS, RSF, SH_TAG\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd3 <- read_delim(\n  \"daten/produkt_nieder_tag_19310101_20171231_00555.txt\", \n  delim = \";\", locale = locale(decimal_mark = \".\"), trim_ws = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 20200 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): eor\ndbl (6): STATIONS_ID, MESS_DATUM, QN_6, RS, RSF, SH_TAG\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd <- bind_rows(d1, d2, d3)\n```\n:::\n\n\n- Schnell gemacht\n\n- Änderungen im Nachhinein zeitraubend\n\n- Nicht empfohlen\n\n\n## Zweite Möglichkeit: In Funktion einlesen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_one_file <- function(filename) {\n  read_delim(filename, delim = \";\", locale = locale(decimal_mark = \".\"), trim_ws = TRUE) |>\n  mutate(\n    MESS_DATUM = ymd(MESS_DATUM),\n    STATIONS_ID = factor(STATIONS_ID)\n  )\n}\nd1 <- read_one_file(\"daten/produkt_nieder_tag_18850601_20171231_05344.txt\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 44742 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): eor\ndbl (6): STATIONS_ID, MESS_DATUM, QN_6, RS, RSF, SH_TAG\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd2 <- read_one_file(\"daten/produkt_nieder_tag_19210101_20171231_01443.txt\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30146 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): eor\ndbl (6): STATIONS_ID, MESS_DATUM, QN_6, RS, RSF, SH_TAG\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd3 <- read_one_file(\"daten/produkt_nieder_tag_19310101_20171231_00555.txt\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 20200 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): eor\ndbl (6): STATIONS_ID, MESS_DATUM, QN_6, RS, RSF, SH_TAG\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd <- bind_rows(d1, d2, d3)\n```\n:::\n\n\n- Funktion: Eingabe Dateinamen, Rückgabewert Dataframe\n\n- Änderung nur an einer Stelle\n\n- Praktisch: Daten in der Funktion aufbereiten\n\n- Wichtig: Zuerst an einer Datei testen, es funktioniert nie auf Anhieb!\n\n- Empfohlen falls nur wenige Dateien\n\n\n## Dritte Möglichkeit: Verzeichnis auflisten lassen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_one_file <- function(filename) {\n  read_delim(filename, delim = \";\", locale = locale(decimal_mark = \".\"), trim_ws = TRUE, show_col_types = FALSE) |>\n  mutate(\n    MESS_DATUM = ymd(MESS_DATUM),\n    STATIONS_ID = factor(STATIONS_ID)\n  )\n}\n\nd <- list.files(path = \"daten\", pattern = \"produkt_nieder_tag.*.txt\", full.names = TRUE) |>\n  map(read_one_file) |>\n  bind_rows()\n```\n:::\n\n\n\n- Mit `list.files` Dateien auflisten lassen\n\n- Mit `map` die Funktion `read_one_file` für alle Dateien ausführen\n\n- Ergebnis mit `bind_rows` in einem Dataframe kombinieren\n\n- Wichtig: Für `bind_rows` müssen Merkmale den selben Datentyp haben. Falls notwendig mit `mutate` und `as.character` oder `as.numeric` konvertieren\n\n- Empfohlen für große Anzahl an Dateien",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}