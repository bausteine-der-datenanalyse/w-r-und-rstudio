{
  "hash": "0457d8cd1418b5329ca05932b26ceae2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Arbeiten mit Zeitreihen\"\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Zeitreihen\n\n## Begriff der Zeitreihe\n\nEine '''Zeitreihe''' ist eine zeitlich geordnete Folge von Beobachtungen, bei der sich die Anordnung der Merkmalsausprägungen zwingend aus dem Zeitablauf ergibt (etwa Aktienkurse, Bevölkerungsentwicklung, Wetterdaten).\n\nDie einzelnen Zeitpunkte werden zu einer Menge von Beobachtungszeitpunkten $T$ zusammengefasst, bei der für jeden Zeitpunkt $t \\in T$ genau eine Beobachtung vorliegt. Zeitreihen treten in allen Bereichen der Wissenschaft auf.\n\nQuelle: <https://de.wikipedia.org/wiki/Zeitreihenanalyse>\n\n## Zeitreihen in R\n\nDas R-Paket `tsibble` stellt eine Datenstruktur (das `tsibble` - wie `tibble` aus dem tidyverserse wobei `ts` für Time Series steht) sowie verschiedene Funktionen bereit, die das Arbeiten mit Zeitreihen vereinfachen.\n\n## Datenstruktur `tsibble`\n\n- Gehört zu den Paketen aus dem `tidyverts`\n\n- Spalte mit Zeit wird als Index bezeichnet\n\n- [Link zur Einführung](https://cran.rstudio.com/web/packages/tsibble/vignettes/intro-tsibble.html)\n\n- Normalen Dataframe mit `as_tsibble` in `tsibble` konvertieren\n  * Zeitpunkte dürfen nicht doppelt vorkommen\n  * Angeben, welche Spalte Index sein soll\n  \n# Winddaten vom Deutschen Wetterdienst\n\n## Übersicht Stationen\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"metaIndex\")\nd_stationen <- metaIndex |> \n  filter(var == \"wind\", res == \"10_minutes\") |>\n  mutate(Dauer = round(as.numeric(bis_datum -von_datum) / 365)) |>\n  arrange(desc(Dauer)) |>\n  select(von_datum, bis_datum, Dauer, Stationsname, Bundesland) |>\n  as_tibble()\nd_stationen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 903 × 5\n   von_datum  bis_datum  Dauer Stationsname          Bundesland        \n   <date>     <date>     <dbl> <chr>                 <chr>             \n 1 1988-10-14 2025-08-18    37 Weissenburg-Emetzheim Bayern            \n 2 1988-10-14 2025-08-18    37 Weissenburg-Emetzheim Bayern            \n 3 1988-10-14 2025-08-18    37 Weissenburg-Emetzheim Bayern            \n 4 1989-03-06 2025-08-18    36 Muehldorf             Bayern            \n 5 1989-03-06 2025-08-18    36 Muehldorf             Bayern            \n 6 1989-03-06 2025-08-18    36 Muehldorf             Bayern            \n 7 1991-01-01 2025-08-17    35 Alsfeld               Hessen            \n 8 1991-01-01 2025-08-17    35 Alsfeld               Hessen            \n 9 1991-01-01 2025-08-17    35 Alsfeld               Hessen            \n10 1991-01-01 2025-08-18    35 Freudenstadt          Baden-Wuerttemberg\n# ℹ 893 more rows\n```\n\n\n:::\n:::\n\n\n## Daten herunterladen und Zwischenspeichern {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfname <- \"daten/d_wind_raw.RData\"\nif (!file.exists(fname)) {\n  d_wind_raw <- selectDWD(\n    name = \"Helgoland\", res = \"10_minutes\", var = \"wind\", per = \"historical\", current = TRUE\n  ) |>\n  dataDWD() |>\n  bind_rows()\n  save(d_wind_raw, file = fname)\n} else {\n  load(file = fname)\n}\nrm(fname)\nd_wind_raw |> as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,454,121 × 6\n   STATIONS_ID MESS_DATUM             QN FF_10 DD_10 eor  \n         <int> <dttm>              <int> <dbl> <int> <fct>\n 1        2115 1996-12-19 10:40:00     1  15.8    70 eor  \n 2        2115 1996-12-19 10:50:00     1  16.2    70 eor  \n 3        2115 1996-12-19 11:00:00     1  16.6    70 eor  \n 4        2115 1996-12-19 11:10:00     1  16      80 eor  \n 5        2115 1996-12-19 11:20:00     1  16.3    70 eor  \n 6        2115 1996-12-19 11:30:00     1  16.3    70 eor  \n 7        2115 1996-12-19 11:50:00     1  16.8    80 eor  \n 8        2115 1996-12-19 12:00:00     1   9.4    80 eor  \n 9        2115 1996-12-19 12:10:00     1  15.2    80 eor  \n10        2115 1996-12-19 12:20:00     1  16.2    80 eor  \n# ℹ 1,454,111 more rows\n```\n\n\n:::\n:::\n\n\n## Winddaten aufbereiten und in `tsibble` konvertieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_wind_raw_ts <- d_wind_raw |>\n  select(Station = STATIONS_ID, Datum = MESS_DATUM, Geschwindigkeit = FF_10) |>\n  distinct(Datum, .keep_all = TRUE) |>\n  as_tsibble(key = Station, index = Datum)\nd_wind_raw_ts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 1,454,109 x 3 [10m] <GMT>\n# Key:       Station [1]\n   Station Datum               Geschwindigkeit\n     <int> <dttm>                        <dbl>\n 1    2115 1996-12-19 10:40:00            15.8\n 2    2115 1996-12-19 10:50:00            16.2\n 3    2115 1996-12-19 11:00:00            16.6\n 4    2115 1996-12-19 11:10:00            16  \n 5    2115 1996-12-19 11:20:00            16.3\n 6    2115 1996-12-19 11:30:00            16.3\n 7    2115 1996-12-19 11:50:00            16.8\n 8    2115 1996-12-19 12:00:00             9.4\n 9    2115 1996-12-19 12:10:00            15.2\n10    2115 1996-12-19 12:20:00            16.2\n# ℹ 1,454,099 more rows\n```\n\n\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Zusatzinformation zu Index und Schlüssel\n\n## Plot der Rohdaten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = d_wind_raw_ts) + \n  geom_line(mapping = aes(x = Datum, y = Geschwindigkeit))\n```\n\n::: {.cell-output-display}\n![](zeitreihen_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Es gibt Lücken im Datensatz, erste Lücke mit Linie verbunden!\n\n## Lücken listen mit `count_gaps`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_wind_raw_ts |> count_gaps() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,865 × 4\n   Station .from               .to                    .n\n     <int> <dttm>              <dttm>              <int>\n 1    2115 1996-12-19 11:40:00 1996-12-19 11:40:00     1\n 2    2115 1996-12-19 13:00:00 1996-12-19 13:00:00     1\n 3    2115 1996-12-19 13:20:00 1996-12-19 13:20:00     1\n 4    2115 1996-12-19 15:00:00 1996-12-19 15:00:00     1\n 5    2115 1996-12-19 15:50:00 1996-12-19 15:50:00     1\n 6    2115 1996-12-19 16:40:00 1996-12-19 16:50:00     2\n 7    2115 1996-12-19 17:50:00 1996-12-19 17:50:00     1\n 8    2115 1996-12-19 19:10:00 1996-12-19 19:10:00     1\n 9    2115 1996-12-19 20:00:00 1996-12-19 20:00:00     1\n10    2115 1996-12-19 20:40:00 1996-12-19 20:40:00     1\n# ℹ 2,855 more rows\n```\n\n\n:::\n:::\n\n\n## Lücken auffüllen mit `fill_gaps`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_wind <- d_wind_raw_ts |> fill_gaps()\nd_wind \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 1,474,496 x 3 [10m] <GMT>\n# Key:       Station [1]\n   Station Datum               Geschwindigkeit\n     <int> <dttm>                        <dbl>\n 1    2115 1996-12-19 10:40:00            15.8\n 2    2115 1996-12-19 10:50:00            16.2\n 3    2115 1996-12-19 11:00:00            16.6\n 4    2115 1996-12-19 11:10:00            16  \n 5    2115 1996-12-19 11:20:00            16.3\n 6    2115 1996-12-19 11:30:00            16.3\n 7    2115 1996-12-19 11:40:00            NA  \n 8    2115 1996-12-19 11:50:00            16.8\n 9    2115 1996-12-19 12:00:00             9.4\n10    2115 1996-12-19 12:10:00            15.2\n# ℹ 1,474,486 more rows\n```\n\n\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Es gibt alle 10 Minuten eine Beobachtung, 20387 neue Zeilen, Werte mit `NA` gekennzeichnet. Damit: Einfacheres Arbeiten!\n\n## Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d_wind) + \n  geom_line(mapping = aes(x = Datum, y = Geschwindigkeit))\n```\n\n::: {.cell-output-display}\n![](zeitreihen_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Lücken werden als Lücken dargestellt\n\n## Starkwindereignisse {.smaller}\n\n**Ereignis**: Windgeschwindigkeit innerhalb von 2 Stunden nicht unter 10 m/s und mindestens einmal über 20 m/s (zu Demonstrationszwecken gewählt, kein Kriterium des DWD)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_wind_stark <- d_wind |>\n  mutate(\n    v_min_120 = roll_minr(Geschwindigkeit, n = 12, na.rm = TRUE),\n    v_max_120 = roll_maxr(Geschwindigkeit, n = 12, na.rm = TRUE)\n  ) |>\n  filter(v_min_120 >= 10, v_max_120 >= 20)\nd_wind_stark \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 10,512 x 5 [10m] <GMT>\n# Key:       Station [1]\n   Station Datum               Geschwindigkeit v_min_120 v_max_120\n     <int> <dttm>                        <dbl>     <dbl>     <dbl>\n 1    2115 1996-12-19 22:00:00            20.5      18.5      20.5\n 2    2115 1996-12-19 22:10:00            20.2      18.5      20.5\n 3    2115 1996-12-19 22:20:00            19.5      18.5      20.5\n 4    2115 1996-12-19 22:30:00            20.2      18.5      20.5\n 5    2115 1996-12-19 22:40:00            20        18.5      20.5\n 6    2115 1996-12-19 22:50:00            NA        18.8      20.5\n 7    2115 1996-12-19 23:00:00            NA        18.9      20.5\n 8    2115 1996-12-19 23:10:00            20.9      19.3      20.9\n 9    2115 1996-12-19 23:20:00            NA        19.5      20.9\n10    2115 1996-12-19 23:30:00            NA        19.5      20.9\n# ℹ 10,502 more rows\n```\n\n\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Funktionen `roll_minr` und `roll_maxr` suchen aus `n = 12` Werten (aktuell und 11 vorangegangene) kleinsten und größten Wert heraus. Analog für Summe, Mittelwert und so weiter. \n\n## Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = d_wind_stark) +\n  geom_line(mapping = aes(x = Datum, y = v_min_120))\n```\n\n::: {.cell-output-display}\n![](zeitreihen_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Einzelne Ereignisse sind nicht zu unterscheiden!\n\n## Ereignisse gruppieren {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_wind_stark_g <- d_wind_stark |>\n  mutate(\n    neue_gruppe = Datum - lag(Datum, default = ymd_hms(\"19700101000000\")) > 10,\n    gruppe = cumsum(neue_gruppe)\n  )\nd_wind_stark_g \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 10,512 x 7 [10m] <GMT>\n# Key:       Station [1]\n   Station Datum               Geschwindigkeit v_min_120 v_max_120 neue_gruppe\n     <int> <dttm>                        <dbl>     <dbl>     <dbl> <lgl>      \n 1    2115 1996-12-19 22:00:00            20.5      18.5      20.5 TRUE       \n 2    2115 1996-12-19 22:10:00            20.2      18.5      20.5 FALSE      \n 3    2115 1996-12-19 22:20:00            19.5      18.5      20.5 FALSE      \n 4    2115 1996-12-19 22:30:00            20.2      18.5      20.5 FALSE      \n 5    2115 1996-12-19 22:40:00            20        18.5      20.5 FALSE      \n 6    2115 1996-12-19 22:50:00            NA        18.8      20.5 FALSE      \n 7    2115 1996-12-19 23:00:00            NA        18.9      20.5 FALSE      \n 8    2115 1996-12-19 23:10:00            20.9      19.3      20.9 FALSE      \n 9    2115 1996-12-19 23:20:00            NA        19.5      20.9 FALSE      \n10    2115 1996-12-19 23:30:00            NA        19.5      20.9 FALSE      \n# ℹ 10,502 more rows\n# ℹ 1 more variable: gruppe <int>\n```\n\n\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Neue Gruppe falls Abstand zwischen Beobachtungen größer 10 Minuten. Beim Zusammenzählen mit `cumsum` wird `FALSE=0` und `TRUE=1` verwendet.\n\n## Plotten mit Gruppe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = d_wind_stark_g) +\n  geom_line(mapping = aes(x = Datum, y = Geschwindigkeit, group = gruppe))\n```\n\n::: {.cell-output-display}\n![](zeitreihen_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Ereignisse zusammenfassen {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_starkwindereignisse <- d_wind_stark_g |> \n  as_tibble() |>\n  group_by(gruppe) |>\n  summarise(\n    start = min(Datum),\n    dauer = max(Datum) - min(Datum),\n    v_max = max(v_max_120)\n  )\nd_starkwindereignisse \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 322 × 4\n   gruppe start               dauer      v_max\n    <int> <dttm>              <drtn>     <dbl>\n 1      1 1996-12-19 22:00:00 16200 secs  20.9\n 2      2 1997-02-04 22:10:00  7200 secs  20.6\n 3      3 1997-02-18 17:00:00  8400 secs  21.3\n 4      4 1997-02-21 10:50:00  9000 secs  20.2\n 5      5 1997-02-25 03:00:00 12600 secs  22.3\n 6      6 1997-04-05 21:10:00  7800 secs  20.3\n 7      7 1997-04-11 08:50:00  7200 secs  20.5\n 8      8 1997-04-11 11:40:00  9000 secs  21.6\n 9      9 1997-04-15 13:50:00  1800 secs  36.3\n10     10 1997-09-09 13:00:00  7800 secs  20.8\n# ℹ 312 more rows\n```\n\n\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ Mit `as_tibble` wieder in 'normalen' Dataframe umwandeln damit `group_by` funktioniert wie gewohnt\n\n## Histogramm Windgeschwindigkeiten\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = d_starkwindereignisse) +\n  geom_histogram(mapping = aes(x = v_max), binwidth = 0.5)\n```\n\n::: {.cell-output-display}\n![](zeitreihen_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n[]{.down40}\n\n$\\rightarrow$ [Orkan Oratia](https://www.wetteronline.de/extremwetter/orkan-oratia-ueber-nordeuropa-sachschaeden-in-millionenhoehe-2000-10-30-or)\n\n## Histogramm Dauer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = d_starkwindereignisse) +\n  geom_histogram(mapping = aes(x = dauer), binwidth = 3600) +\n  scale_x_time()\n```\n\n::: {.cell-output-display}\n![](zeitreihen_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "zeitreihen_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}