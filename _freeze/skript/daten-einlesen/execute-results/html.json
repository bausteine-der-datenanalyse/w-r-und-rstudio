{
  "hash": "c075f0f75f4f1f0f43b2aed9abee7a94",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Daten einlesen\"\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Tidyverse\n\n## Tidyverse\n\n[]{.down40}\n\n![](bilder/tidyverse.svg)\n\n[]{.down40}\n\n- Sammlung von Bibliotheken für Data-Science in R\n- Durchgängige Designphilosophie und Datenstrukturen\n- Viele Dinge leichter und eleganter zu erledigen als in 'reinem' R\n- Ursprünglich von Hadley Wickham, heute viele Entwickler\n- Einführung vom Autor auf [Youtube](https://youtu.be/MjHQo-t2v_c) (englisch)\n\n# Excel-Dateien lesen\n\n## Funktion `read_excel(...)`\n\nPaket laden\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\nTabelle einlesen\n\n```{.r}\nd <- read_excel(Dateiname, Parameter...)\n```\n\nDie wichtigsten Parameter\n\nParameter       | Bedeutung                                   | Optional\n----------------|---------------------------------------------|---------\nskip = 5        | Anzahl zeilen, die überlesen werden sollten | Ja\nrange = \"B2:G5\" | Einzulesender Bereich (ersetzt `skip`)      | Ja\nsheet = \"Name\"  | Tabellenblatt, das gelesen werden soll      | Ja\n\n: {tbl-colwidths=\"[20,50,30]\"}\n\n## Beispiel 1: Einfache Tabelle {.smaller}\n\n::: {layout-ncol=2}\n\n![](bilder/tabelle.svg)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- read_excel(\"daten/tabelle.xlsx\")\nkable(d)\n```\n\n::: {.cell-output-display}\n\n\n|Datum      | Anzahl|Name  |\n|:----------|------:|:-----|\n|2012-12-30 |     10|Fritz |\n|2012-12-31 |     30|Silke |\n|2013-01-01 |      1|Anja  |\n|2013-01-02 |     50|Horst |\n|2013-01-03 |      2|Maria |\n\n\n:::\n:::\n\n:::\n\n- `read_excel(...)` liest Excel-Datei und gibt Dataframe zurück\n- Im einfachsten Fall nur Datei angeben, Inhalt von erstem Sheet\n- Datum wird manchmal korrekt als date-time eingelesen\n\n## Leider nicht immer so einfach\n\n![](bilder/excel-screenshot.svg)\n\nWo liegt das Problem?\n\n- Es soll bestimmtes Tabellenblatt gelesen werden\n- Bereiche links und oben sollen ignoriert werden\n\n→ Importassistent!\n\n## Importassistent 1/3\n\n![](bilder/importassistent-1.svg)\n\n## Importassistent 2/3\n\n![](bilder/importassistent-2.svg)\n\n## Importassistent 3/3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd<-read_excel(\"daten/unistrasse-2017.xlsx\",sheet=\"raw(T)\",range=\"B2:H20712\")\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20,710 × 7\n   Datum      Geschwindigkeit Fahrtrichtung Abstand `Länge (Radar)` `Länge (cm)`\n   <chr>                <dbl> <chr>           <dbl>           <dbl>        <dbl>\n 1 13.12.201…              70 Ankommend      262.               372          421\n 2 13.12.201…              59 Ankommend        5.18             401          454\n 3 13.12.201…              79 Ankommend       15.7              403          456\n 4 13.12.201…              58 Ankommend      111.               423          479\n 5 13.12.201…              60 Ankommend       69.5              372          421\n 6 13.12.201…              57 Ankommend       16.7              430          487\n 7 13.12.201…              58 Ankommend       63.9              342          387\n 8 13.12.201…              54 Ankommend       90.7              422          478\n 9 13.12.201…              56 Ankommend      122.               436          493\n10 13.12.201…              61 Ankommend      354.               377          427\n# ℹ 20,700 more rows\n# ℹ 1 more variable: Fahrzeug <chr>\n```\n\n\n:::\n:::\n\n\n- Einstellung in Excel unvollständig, daher Datum nicht richtig gelesen\n- Anmerkung: Große Dataframes nicht mit `kable` ausgeben\n\n# CSV-Dateien einlesen\n\n## Aufbau und Inhalt von CSV-Dateien\n\n![](bilder/csv.svg)\n\n- csv = Comma Separated Values, weit verbreitet, nicht standardisiert\n- Häufig Kopfzeile(n) mit Beschreibung des Inhalts\n- Inhalt in der Regel mit\n  - Datenfeldern getrennt z.B. durch Komma, Semikolon, Leerzeichen...\n  - Datum in verschiedensten Formaten\n  - Zahlen mit oder ohne Dezimaltrenner (Punkt oder Komma)\n  - Spezielle Kennzeichnung von fehlenden Werten\n\n## Amerikanische Konvention {.smaller}\n\nDatei `beispiel-1.csv`\n\n```{}\n       A, B,         C,          D\n     1.2, 3,   Frances, 2020-12-01\n     2.6, 1,    Howard, 2020-12-01\n     1.7, 6, Kimberley, 2020-12-01\n500000.2, 3,    Stacey, 2020-12-01\n\n```\n\n- Einträge durch \"`,`\" getrennt, Dezimaltrenner ist \"`.`\"\n- Datum mit Jahr/Monat/Tag\n\nEinlesen mit `read_csv(...)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"daten/beispiel-1.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n         A     B C         D         \n     <dbl> <dbl> <chr>     <date>    \n1      1.2     3 Frances   2020-12-01\n2      2.6     1 Howard    2020-12-01\n3      1.7     6 Kimberley 2020-12-01\n4 500000.      3 Stacey    2020-12-01\n```\n\n\n:::\n:::\n\n\n- Datum wird erkannt\n\n## Deutsche Konvention {.smaller}\n\nDatei `beispiel-2.csv`\n\n```{}\n        A; B;        C;         D\n      1,2; 3; Franziska; 01-10-2022\n      2,6; 1;  Philipp; 03-12-2002\n      1,7; 6;   Angela; 29-01-1977\n500.000,2; 3;   Sabine; 07-01-1898\n\n```\n\n- Einträge durch \"`;`\" getrennt, Dezimaltrenner ist \"`,`\", Tausender mit \"`.`\" \n- Datum mit Tag/Monat/Jahr\n\nEinlesen mit `read_csv2(...)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv2(\"daten/beispiel-2.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n         A     B C         D         \n     <dbl> <dbl> <chr>     <chr>     \n1      1.2     3 Franziska 01-10-2022\n2      2.6     1 Philipp   03-12-2002\n3      1.7     6 Angela    29-01-1977\n4 500000.      3 Sabine    07-01-1898\n```\n\n\n:::\n:::\n\n\n- Datum wird nicht erkannt\n\n## Gemischte Konvention {.smaller}\n\nDatei `beispiel-3.csv`\n\n```{}\n        A; B;        C; D\n      1.2; 3; Franziska; 01-10-2022\n      2.6; 1;  Philipp; 03-12-2002\n      1.7; 6;   Angela; 29-01-1977\n500,000.2; 3;   Sabine; 07-01-1898\n\n```\n\n- Einträge durch \"`;`\" getrennt, Dezimaltrenner ist \"`.`\", Tausender mit \"`,`\" \n- Datum mit Tag/Monat/Jahr\n\nEinlesen mit `read_delim(...)`, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_delim(\"daten/beispiel-3.csv\", delim=\";\", trim_ws=TRUE, locale=locale(decimal_mark=\".\", grouping_mark=\",\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n         A     B C         D         \n     <dbl> <dbl> <chr>     <chr>     \n1      1.2     3 Franziska 01-10-2022\n2      2.6     1 Philipp   03-12-2002\n3      1.7     6 Angela    29-01-1977\n4 500000.      3 Sabine    07-01-1898\n```\n\n\n:::\n:::\n\n\n- `delim` wie delimiter = Trennzeichen\n- `locale` enthält länderspezifische Einstellungen\n- `trim_ws` wie trim whitespace = entfernt Leerzeichen (wichtig!)\n- Datum wird nicht erkannt\n\n\n## Kodierung {.smaller}\n\nDatei `beispiel-4.csv`\n\n```{}\n        A; B;        C;         D\n      1,2; 3;     J�rg; 01-10-2022\n      2,6; 1;    Clau�; 03-12-2002\n      1,7; 6;   �ngela; 29-01-1977\n500.000,2; 3;   J�rgen; 07-01-1898\n\n```\n\n- Datei ist ISO-8859-1 kodiert, Grundeinstellung in R ist UTF-8\n\nEinlesen mit `read_csv2(...)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv2(\"daten/beispiel-4.csv\", locale=locale(encoding=\"iso-8859-1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n         A     B C      D         \n     <dbl> <dbl> <chr>  <chr>     \n1      1.2     3 Jörg   01-10-2022\n2      2.6     1 Clauß  03-12-2002\n3      1.7     6 Ängela 29-01-1977\n4 500000.      3 Jürgen 07-01-1898\n```\n\n\n:::\n:::\n\n\n- Kodierung beim Einlesen explizit angeben\n\n## Beispiel: Niederschlagsdaten Bochum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_delim(\n  \"daten/produkt_nieder_monat_18910101_20171231_00555.txt\",\n  delim = \";\", trim_ws=TRUE,\n  locale = locale(decimal_mark = \".\", grouping_mark = \",\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,144 × 9\n   STATIONS_ID MESS_DATUM_BEGINN MESS_DATUM_ENDE  QN_6 MO_NSH MO_RR MO_SH_S\n         <dbl>             <dbl>           <dbl> <dbl>  <dbl> <dbl>   <dbl>\n 1         555          18910101        18910131     5   -999    61    -999\n 2         555          18910201        18910228     5   -999     9    -999\n 3         555          18910301        18910331     5   -999   105    -999\n 4         555          18910401        18910430     5   -999    64    -999\n 5         555          18910501        18910531     5   -999    61    -999\n 6         555          18910601        18910630     5   -999   142    -999\n 7         555          18910701        18910731     5   -999   117    -999\n 8         555          18910801        18910831     5   -999    54    -999\n 9         555          18910901        18910930     5   -999    20    -999\n10         555          18911001        18911031     5   -999    38    -999\n# ℹ 1,134 more rows\n# ℹ 2 more variables: MX_RS <dbl>, eor <chr>\n```\n\n\n:::\n:::\n\n\n\n## CSV-Dateien Zusammenfassung\n\n[]{.down60}\n\n```{.r}\nread_csv(Dateiname, Parameter...)   # Amerikanische Konvention\nread_csv2(Dateiname, Parameter...)  # Deutsche Konvention\nread_delim(Dateiname, locale=locale(decimal_mark=\".\", grouping_mark=\",\"), Parameter...)\n```\n\n[]{.down60}\n\nDie wichtigsten Parameter\n\nParameter              | Bedeutung                                   | Optional\n-----------------------|---------------------------------------------|---------\nskip = 5               | Anzahl zeilen, die überlesen werden sollten | Ja\ntrim_ws = TRUE         | Leerzeichen entfernen (für `read_delim`)    | Ja\nshow_col_types = FALSE | Ausgabe unterdrücken                        | Ja\n\n: {tbl-colwidths=\"[30,50,20]\"}\n\n# Rohdaten\n\n## Hände weg von den Rohdaten! {.smaller}\n\n![](bilder/haende-weg.svg)\n\n:::: {.columns}\n::: {.column width=45%}\n**Rohdaten dürfen nicht verändert werden**\n\n[]{.down40}\n\n- 'Von Hand' durchgeführte Änderungen sind später nicht mehr nachvollziehbar\n- Änderungen nur schwer einzeln rückgängig zu machen\n:::\n\n::: {.column width=10%}\n\n:::\n\n::: {.column width=45%}\n**Stattdessen: Rohdaten einlesen und in R aufbereiten**\n\n- R-Code dokumentiert was verändert wurde\n- Wird bei der Benotung berücksichtigt\n:::\n::::\n\n## Beim Einlesen von Daten gilt immer\n\n[]{.down120}\n\n- Vorsicht: Eingelesene Daten sehr sorgfältig anschauen!\n- Überblick verschaffen mit `summary(d)` und/oder `str(d)`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}