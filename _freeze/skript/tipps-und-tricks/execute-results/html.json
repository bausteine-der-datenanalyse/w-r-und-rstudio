{
  "hash": "985e05725dc36b54c2f2f2289cb2f0d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tipps und Tricks\"\n---\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n# Dataframes speichern und laden\n\n\n## Dataframe speichern und laden 1/3\n\nManchmal dauert es lange einen bestimmten Dataframe zu erzeugen. Dies kann zum Beispiel\nder Fall sein, wenn die Daten zuerst aus dem Internet heruntergeladen werden müssen. Dann\nmacht es oft Sinn, das Projekt in zwei Dateien aufzuteilen:\n\n1. In der einen qmd-Datei werden die Daten geladen und aufbereitet. Die fertigen Daten können\ndann auf der Festplatte abgelegt werden.\n\n1. In einer anderen qmd-Datei werden die aufbereiteten Daten von der Festplatte eingelesen und\ndann statistisch ausgewertet.\n\nDiese Vorgehensweise lässt sich mit wenig Aufwand durch die Funktionen `save` und `load` realisieren.\n\n\n## Dataframe speichern und laden 2/3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(A = c(1, 2, 3), B = c('u', 'v', 'w'))\nsave(d, file = \"daten/test.RData\")\nrm(list = \"d\")\n```\n:::\n\n\nDataframe `d`\n\n1.  anlegen\n\n1.  in der Datei `daten/test.RData` speichern\n\n1.  löschen (nur für Demonstrationszwecke) (mit rm für remove = entfernen)\n\n\n## Dataframe speichern und laden 3/3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload('daten/test.RData')\n```\n:::\n\n\n- Dataframe `d` wurde aus der Datei geladen und ist jetzt wieder vorhanden\n- Einlesen geht auch für umfangreiche Datensätze sehr schnell\n\n\n# Zeichenketten suchen und ersetzen \n\n## Beispieldatensatz\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(\n  Name = c(\"Unistraße Nord\", \"Unistraße Süd\", \"Markstraße Ost\", \"Markstraße West\"), \n  Wert = c(10, 20, 4, 8)\n)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  Name             Wert\n  <chr>           <dbl>\n1 Unistraße Nord     10\n2 Unistraße Süd      20\n3 Markstraße Ost      4\n4 Markstraße West     8\n```\n\n\n:::\n:::\n\n\n\n## Richtung löschen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd |>\n    mutate(Name2 = str_replace(Name, \" Nord| Süd| Ost| West\", \"\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  Name             Wert Name2     \n  <chr>           <dbl> <chr>     \n1 Unistraße Nord     10 Unistraße \n2 Unistraße Süd      20 Unistraße \n3 Markstraße Ost      4 Markstraße\n4 Markstraße West     8 Markstraße\n```\n\n\n:::\n:::\n\n\n- Mit `str_replace` werden die Richtungen durch eine leere Zeichenkette ersetzt\n- Verschiedene zu ersetztende Zeichenketten mit `|` trennen\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}