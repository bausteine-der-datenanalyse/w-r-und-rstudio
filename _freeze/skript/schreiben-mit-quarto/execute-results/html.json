{
  "hash": "52aff328decc560adac17bb79a6b6044",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Schreiben mit Quarto\"\nauthor: \"Matthias Baitsch und Florian Bagemihl\"\n\ndate: today\ndate-format: long\n\nlang: de\n\nbibliography: bibliographie.bib\nbibliographystyle: american-psychological-association\n\nexecute: \n  echo: false\n\nformat: \n  typst:\n    toc: true\n    section-numbering: 1.1.1\n---\n\n\n\n# Einführung\n\nDies ist eine kurze Einführung in das Schreiben mit [Quarto](www.quarto.org). Es handelt sich um ein Programmsystem zur Erstellung wissenschaftlicher und technischer Dokumente, mit dem Sie\n\n- Abschlussarbeiten, Berichte oder Webseiten erstellen,\n- Text und Programmcode (R, Python, Julia) mischen,\n- Mathematische Formeln in LaTeX-Schreibweise eingeben,\n- Automatisch ein Literatur- und Inhaltsverzeichnis erstellen\n\nkönnen. Mehr Informationen finden Sie in im [Tutorial zur Verwendung von Quarto in RStudio](https://quarto.org/docs/get-started/hello/rstudio.html).\n\n# Aufbau einer Quarto-Datei\n\nEine Quarto-Datei besitzt die Endung `.qmd` und setzt sich aus einem Dateikopf und dem eigentlichen Inhalt zusammen.\n\n## Dateikopf\n\nGanz zu Beginn der Datei steht zwischen `---` und `---` der so genannte YAML-Header der Datei (YAML heißt die Auszeichnungssprache des Headers, aber das ist für uns nicht wichtig). Im Dateikopf werden grundlegende Einstellungen zum Dokument festgelegt. Sie könnnen für ihre Arbeit folgenden Header als Grundlage verwenden:\n\n``` yaml\n---\ntitle: \"Titel eintragen\"\nauthor: \"Namen eintragen\"\ndate: today\ndate-format: long\nlang: de\n\nbibliography: bibliographie.bib\nbibliographystyle: american-psychological-association\n\nexecute: \n  echo: false\n\nformat: \n  typst:\n    toc: true\n    section-numbering: 1.1.1\n---\n```\n\nIn diesem Header werden zunächst Titel, Autor:innen, das Datum sowie die Dokumentensprache festgelegt.\n\nAnschließend wird angegeben, dass sich die verwendeten Literaturstellen in der Datei `bibliographie.bib` befinden und der weit verbreitete Zitierstil der amerikanischen Psychologischen Vereinigung verwendet werden soll.\n\nIm nächsten Abschnitt wird gesagt, dass der R-Code nicht ausgegeben wird. Verwenden Sie diese Option um den Fluss beim Lesen Ihres Textes nicht durch Programmcode zu stören. Bei Bedarf lassen sich die Rechnungen gut anhand des Quellcodes nachvollziehen.\n\nSchließlich wir als Ausgabeformat `typst` ausgewählt um ein PDF-Dokument zu erzeugen. Dabei steht `toc: true` dafür, dass ein Inhaltsverzeichnis eingefügt wird (toc = *Table of Contents*), `number-sections: true` für nummerierte Abschnitte und `section-numbering: 1.1.1` für das Nummerierungschema. \n\n## Inhalt\n\n**R-Setup**\n\nIn dem Setup-Abschnitt\n\n```{{r}}\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(kableExtra)\n```\n\nwerden die notwendigen Bibliotheken geladen. Es empfiehlt sich alle im Dokument verwendeten Pakete als ersten Code-Chunk im Dokument zu laden.\n\n## Eigener Text\n\nDen weitaus größten Teil des Dokuments nehmen Ihre eigenen statistischen Berechnungen und Auswertungen ein. Geschrieben wird in der Quarto Markdown Auszeichnungssprache, einer Variante von Markdown (<https://de.wikipedia.org/wiki/Markdown>). Es handelt sich bei Quarto Markdown um eine einfache Sprache zur Erstellung von Dokumenten aus einer Kombination von eigenem Text und Programmcode. Die Elemente der Sprache werden im folgenden Abschnitt erklärt.\n\n# Elemente von Quarto Markdown\n\n## Text\n\n### Gliederung\n\nAbschnittsüberschriften werden durch vorangestellte Hash-Zeichen markiert.\n\n``` markdown\n# Überschrift erste Gliederungsebene\n\n## Überschrift zweite Gliederungsebene\n\n### Überschrift dritte Gliederungsebene\n```\n\nSoll der Abschnitt nicht nummeriert werden, dann kommt ein `{-}` oder {.unnumbered} an das Ende der Zeile.\n\n### Formatierung\n\nText wird *kursiv* gesetzt, wenn die Zeichen wie in `*text*` zwischen Sternchen gesetzt werden. **Fettdruck** erhält man mit zwei Sternchen, also `**text**` und ***Fett-Kursiv*** mit `***text***`. Ein Paar von Tilden (`~`) stellen Zeichen tief (`H~2~O` ergibt H~2~O), entsprechend erzeugt ein Paar von Caret-Zeichen (`^`) hochgestellten Text (`Cu^2+^` ergibt Cu^2+^).\n\n### Listen\n\nBullet-Listen werden mit vorangestellten Bindestrich erstellt. Zum Beispiel ergibt die Eingabe\n\n``` markdown\n- Ein Punkt in der Liste\n- Ein weiterer Punkt\n  - Eine Ebene eingerückt\n  - Und noch ein Punkt\n```\n\ndie Liste\n\n-   Ein Punkt in der Liste\n-   Ein weiterer Punkt\n    -   Eine Ebene eingerückt\n    -   Und noch ein Punkt\n\nNummerierte Listen erzeugt man entsprechend mit einer vorangestellten Zahl oder Buchstaben. Mit\n\n``` markdown\n1. Ein Punkt in der Liste\n1. Ein weiterer Punkt\n   a. Eine Ebene eingerückt\n   a. Und noch ein Punkt\n```\n\nergibt sich die Ausgabe\n\n1.  Ein Punkt in der Liste\n2.  Ein weiterer Punkt\n    a.  Eine Ebene eingerückt\\\n    b.  Und noch ein Punkt\n\n## R-Programmcode\n\n### Code-Chunks\n\nDie wichtigste Möglichkeit R-Code in Dokumente einzufügen sind Code-Chunks. Ein Code-Chunk enthält Anweisungen in der Programmiersprache R. So erzeugt etwa der Chunk\n\n```{{r}}\nsqrt(2)\nsqrt(3)\n```\n\ndie Ausgabe\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.414214\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.732051\n```\n\n\n:::\n:::\n\n\nBeachten Sie, dass der Code selber nicht mit ausgegeben wird, da wir dies in dem YAML-Header voreingestellt haben. Die Ausgabe von R-Chunks kann mit verschiedenen Optionen konfiguriert werden.\n\n**Option zur Ausgabe**\n\nMithilfe von Codezelloptionen können Optionen zur Ausführung des Code angegeben werden. Diese beginnen im Code-Chunk immer mit `#|` . Beispielsweise gibt `#| echo: true` an, dass der Code mit ausgegeben wird. Mit\n\n```{{r}}\n#| echo: true\nsqrt(5)\nsqrt(6)\n```\n\nerhalten wir also\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.236068\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.44949\n```\n\n\n:::\n:::\n\n\nWelche Ausgaben von den verschiedenen Optionen unterdrückt werden ist in der folgenden Tabelle zusammengefasst:\n\n| Option           | Ausführung | Anzeige | Ausgabe | Plots | Meldungen | Warnungen |\n|------------------|:----------:|:-------:|:-------:|:-----:|:---------:|:---------:|\n| `eval: FALSE`    |     X      |         |    X    |   X   |     X     |     X     |\n| `include: FALSE` |            |    X    |    X    |   X   |     X     |     X     |\n| `echo: FALSE`    |            |    X    |         |       |           |           |\n| `results: hide`  |            |         |    X    |       |           |           |\n| `fig-show: hide` |            |         |         |   X   |           |           |\n| `message: FALSE` |            |         |         |       |     X     |           |\n| `warning: FALSE` |            |         |         |       |           |     X     |\n\n**Optionen zur Referenzerstellung**\n\nMit der Option `#| label:` können Sie ihrem Code-Chunk eine Bezeichnung geben, um diesen später im Text zu referenzieren.\n\n**Optionen für Graphiken**\n\nDarüber hinaus gibt es eine Reihe von Optionen, mit denen sich die erzeugten Graphiken angepassen lassen:\n\n-   `#| fig-width` und `#| fig-height`: Die Größe des R-Plots in Inches (2.54cm). Die Plots werden zunächst in dieser Größe erzeugt und dann auf die Abmessungen der Seite skaliert. Große Plots resultieren also in einer kleinen Schriftgröße.\n\n-   `#| fig-asp`: Mit diesem Wert wird das Seitenverhältnis der Graphik angegeben.\n\n-   `#| out-width`: Die Ausgabebreite von R-Plots in dem erzeugten Dokument. Der Plot wird auf die angegebenen Prozent der Textbreite skaliert. Zum Beispiel bedeutet `out-width: 80%`, dass der Plot auf 80% der Textbreite dargestellt wird. Wenn Sie keine Einheit wie `%` oder `inch` angeben, werden Pixel als Standardeinheit verwendet. Mögliche Einheiten sind `px`,`cm` , `mm` , `in`, `inch` oder `%` .\n\n-   `#| fig-align`: Die Ausrichtung des Plots, entweder `'left'`, `'center'`, oder `'right'`. Hat bei einer Breite des Plots von 100% keinen Effekt.\n\n-   `#| fig-cap`: Bildunterschrift.\n\nHier ein Beispiel mit den Optionen `#| fig-width: 3` , `#| fig-height: 3` und `#| out-width: 50%`, die einen quadratischen Plot erzeugen.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Ein quadratischer Plot (Beispieldatensatz `mtcars`)](schreiben-mit-quarto_files/figure-html/unnamed-chunk-4-1.png){width=50%}\n:::\n:::\n\n\nIn der Regel funktionieren die Standardeinstellung aber gut und können unverändert beibehalten werden.\n\n### Inline-Code\n\nProgrammcode in R kann mit `{{r}} R-Code` auch in den fortlaufenden Text eingebaut werden. Zum Beispiel berechnet `{{r}} signif(sqrt(2), 4` die Wurzel der Zahl 2 und gibt das Ergebnis mit vier signifikanten Stellen aus, der Text enthält daher die Ausgabe 1.414.\n\nBesonders praktisch ist es dabei, dass auch auf vorher definierte Variablen zugegriffen werden kann. Wird also in einem Code-Chunk ein Wert berechnet dann kann dieser später im Text ausgegeben werden. Zum Beispiel wird mit dem Code-Chunk\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nx <- sqrt(6)\n```\n````\n:::\n\n\ndie Variable x berechnet. Dann ergibt `x =` `{{r}} x` die Ausgabe x = 2.4494897.\n\n## Mathematische Formeln\n\nMathematischer Formelsatz erfolgt in der Schreibweise von LaTeX. Wird ein Ausdruck zwischen Dollarzeichen gesetzt, dann erscheint er als Formel im Text. Zum Beispiel ergibt `$M = ql^2/8$` die Ausgabe $M = ql^2/8$. Vom Text Abgesetzte Formel werden durch doppelte Dollarzeichen ausgezeichnet. Zum Beispiel liefert\n\n``` markdown\n$$\nM = \\frac{ql^2}{8}\n$$\n```\n\ndie Ausgabe\n\n$$\nM = \\frac{ql^2}{8}\n$$\n\nWer die LaTeX-Schreibweise nicht kennt, kann sich auf <https://www.zahlen-kern.de/editor/> helfen lassen.\n\n## Externe Graphiken\n\nEine externe Graphik können Sie folgendermaßen einbinden:\n\n`![Bildunterschrift](Dateipfad){Darstellungsoptionen}`\n\nAls Beispiel:\n\n`![Golden Gate Brücke (Quelle: Wikipedia)](bilder/golden-gate.jpg){#fig-golden-gate width=60%}`\n\n![Golden Gate Brücke (Quelle: Wikipedia)](bilder/golden-gate.jpg){#fig-golden-gate width=\"60%\"}\n\nStandardmäßig werden Graphiken in ihrer tatsächlichen Größe dargestellt. Sie können mit den Darstellungsoptionen `width` und `height` die Größe anpassen. Wenn Sie, wie in unserem Beispiel, nur `width` spezifizieren wird `height` automatisch an das Seitenverhältnis angepasst. Die Standardeinheit für Graphiken sind Pixel, sie können aber sowohl Prozentangaben (in Relation zum Textoutput) als auch anderen Einheiten wie Inches verwenden. Weiterhin ist `#fig-golden-gate` ein Label, das sie in der Form `@fig-golden-gate` verwenden, um im Text auf die Graphik zu verweisen. Hier ein Beispiel, wie das aussehen kann.\n\n@fig-golden-gate zeigt die Golden Gate Brücke in San Francisco, ein bedeutendes Denkmal der Ingenieurbaukunst.\n\nGrundsätzlich gilt die Regel: Abbildungen werden immer im Text referenziert, sonst kann man sie auch weglassen.\n\n## Tabellen\n\nTabellen lassen sich aus einem Dataframe mit der Funktion `kable` erzeugen, ein Minimalbeispiel zeigt @tbl-mathematische-konstanten. Auch hier kann wieder mithilfe der Bezeichnung des R-Chunks aus dem Text auf die Tabelle verwiesen werden.\n\n\n::: {#tbl-mathematische-konstanten .cell}\n::: {.cell-output-display}\n\n\nTable: Mathematische Konstanten\n\n|A            |  Test|\n|:------------|-----:|\n|$\\pi$        | 3.142|\n|$\\mathrm{e}$ | 2.718|\n|$\\sqrt{2}$   | 1.414|\n\n\n:::\n:::\n\n\nAlternativ können Tabellen auch in der Markdown-Schreibweise eingefügt werden.\n\n| Länge | Breite | Höhe | Dichte |\n|-------|--------|------|--------|\n| 5.1   | 3.5    | 1.4  | 0.2    |\n| 4.9   | 3.0    | 1.4  | 0.2    |\n| 4.7   | 3.2    | 1.3  | 0.2    |\n| 4.6   | 3.1    | 1.5  | 0.2    |\n| 5.0   | 3.6    | 1.4  | 0.2    |\n| 5.4   | 3.9    | 1.7  | 0.4    |\n\n: Eine weitere Tabelle {#tbl-eine-weitere-tabelle}\n\nEine umfassende Erläuterung finden Sie auf der Website von Quarto unter <https://quarto.org/docs/authoring/tables.html>.\n\n## Verweise auf Literaturstellen\n\nUm auf Literaturstellen zu verweisen werden die verwendeten Veröffentlichungen in der Datei `bibliographie.bib` gesammelt (die Datei kann auch anders heißen). Es handelt sich dabei um eine Datei im [BibTeX-Format](https://de.wikipedia.org/wiki/BibTeX). Jeder Eintrag beginnt mit einer ID, zum Beispiel `fahrmeir2016` für das Statistikbuch von Fahrmeir et al. Auf die Literaturstellen kann dann im Text mit `[@ID]` verwiesen werden. Beispielsweise ergibt `[@fahrmeir2016]` den Verweis [@fahrmeir2016]. Die referenzierten Literaturstellen werden automatisch am Ende des Dokuments zusammengefasst.\n\n## Weitere Punkte\n\n-   Zur Verwaltung der Literaturliste ist das Programm [Zotero](https://www.zotero.org) sehr gut geeignet. Es lassen sich damit Literaturstellen sammeln und im BibTeX-Format exportieren, im visuellen Editor von RStudio können Zotero-Referenzen sogar direkt eingefügt werden.\n\n-   Das Aussehen der PDF-Dokumente kann man angepassen. Wie das geht erklärt [ein kurzes Video zur Einführung](https://youtu.be/2DbuqYKOsrY?si=oVfzelhrEbnCLPJv&t=715) auf Youtube.\n\n-   Auf der Webseite von Quarto gibt es noch eine [tiefergehende Einführung in das wissenschaftliche Schreiben mit Quarto](https://quarto.org/docs/visual-editor/technical.html).\n",
    "supporting": [
      "schreiben-mit-quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}